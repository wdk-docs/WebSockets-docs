# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the WebSockets Docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: WebSockets Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-09 16:03+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/ws/koa-easy-ws.rst:2
msgid "koa-easy-ws"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:4
msgid "Simple, easy to use, composable middleware for websocket handling in Koa"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:7
msgid "Usage"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:31
msgid ""
"First, you need to pass the koa-easy-ws middleware before the one "
"handling your request. Remember to call it as a function, "
"`app.use(websocket())`, not `app.use(websocket)`. This sets up on-demand "
"websocket handling for the rest of the middleware chain."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:33
msgid ""
"The middleware adds the `ctx.ws()` function whenever it detects an "
"upgrade request, calling which handles the websocket and returns a "
"[ws][ws] instance. If not called, regular Koa flow continues, likely "
"resulting in a client-side error."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:36
msgid "Features"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:38
msgid ""
"No magic. This is a middleware, it doesn't turn your Koa app into a "
"KoaMagicWebSocketServer. It knows its place."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:39
msgid ""
"Integrates [ws][ws], one of the fastest and most popular websocket "
"libraries."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:40
msgid ""
"Full composability. Since this is just a middleware, it's not picky on "
"what other libraries you use."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:41
msgid ""
"Minimal, unopinionated 40 SLOC codebase. Seriously, this readme alone "
"contains more code than what's imported into your project. (sorry about "
"the tests though)"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:42
msgid ""
"Two dependencies only, and it's the ws library and [debug][debug] "
"(because apparently logs are not a bad idea). No need for more clutter in"
" your node_modules."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:45
msgid "Examples and advanced configuration"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:47
msgid "You can easily compose koa-easy-ws with a routing library:"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:79
msgid ""
"If `ctx.ws()` isn't enough for you, the websocket server instance is also"
" exposed:"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:95
msgid ""
"This gives you access to the [ws][ws] server object, allowing to pass "
"down custom listeners, connection validators, etc."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:97
msgid ""
"Alternatively, you can pass options to the underlying [ws][ws] server as "
"part of the options object:"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:109
msgid ""
"The `wsOptions` object will be forwarded to [ws][ws] unchanged, you can "
"check [its documentation][ws] for the available options."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:111
msgid ""
"In case `ctx.ws` conflicts with something else in your code, koa-easy-ws "
"doesn't mind changing the property name, just pass it as a property. This"
" also lets you use multiple websocket middlewares if you ever find a "
"reason to do so:"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:138
msgid ""
"Note: in this example `ctx.maul` is never used because there is no limit "
"on the authority of `ctx.sidious`. However, if you define custom logic "
"this technique could sort incoming requests to separate websocket "
"servers."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:140
msgid "From here, the sky is the limit, unless you work for SpaceX."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:143
msgid "Special usage for Node 9 or earlier"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:145
msgid ""
"Node's HTTP server doesn't send upgrade requests through the normal "
"callback (and thus your Koa middleware chain) prior to version 10, "
"preventing koa-easy-ws from handling them. Because of this, if you target"
" Node 9 or earlier, you must pass your HTTP server to the middleware "
"which handles the workaround:"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:161
msgid ""
"koa-easy-ws then automatically feeds any upgrade request into your "
"regular middleware chain. If you wish to opt out and do this yourself, "
"use the `noServerWorkaround` option:"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:171
msgid "Contributing"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:173
msgid ""
"Pull requests are welcome. As always, be respectful towards each other "
"and maybe run or create tests, as appropriate. It's on `npm test`, as "
"usual."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:175
msgid ""
"koa-easy-ws uses the MIT license. Was considering the WTFPL, but I like "
"the \"no warranty\" clause."
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:177
msgid "[ws]: https://github.com/websockets/ws"
msgstr ""

#: ../../source/ws/koa-easy-ws.rst:179
msgid "[debug]: https://github.com/visionmedia/debug"
msgstr ""

