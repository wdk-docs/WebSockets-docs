# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the WebSockets Docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: WebSockets Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-09 16:03+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/socket.io/_posts/20150309-ios.rst:2
msgid "Socket.IO on iOS"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:20
msgid ""
"We are pleased to announce the immediate availability of the Socket.IO "
"Swift Client! Youll now be able to write code that runs natively on "
"**iOS** and **OSX**, while maintaining the simplicity and expressiveness "
"of the JavaScript client!"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:36
msgid ""
"To show how you can use it in a real project, Ill show you how to create "
"a small Tic Tac Toe app like the one shown above."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:40
msgid "Overview"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:42
msgid ""
"In this tutorial well look at creating a small iOS app that demonstrates "
"socket.io and iOS. If you learn better from looking at code you can look "
"at it here. The point of the tutorial is not to explain developing an iOS"
" app, but to demonstrate how you can incorporate ``socket.io-client-"
"swift`` into your projects! So it is assumed you have a basic knowledge "
"of XCode. Note: This example uses Swift 1.2. However, 1.2 isnt much "
"different from Swift 1.1, and the library has branches for Swift 1.1 and "
"1.2. The only difference in this guide is I use 1.2s expanded ``if let`` "
"construct to avoid nesting. Note 2: While this library is written in, and"
" meant for, Swift applications, it can be used with Objective-C projects,"
" but will require some extra work (youll probably need to create a Swift "
"class that can interface with your Objective-C code, as not all methods "
"in the client will be available to Objective-C i.e emit, onAny). See this"
" for more information."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:58
msgid "Introduction"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:60
msgid ""
"I designed ``socket.io-client-swift`` to be as close to ``socket.io-"
"client`` as I could. So many of the ways you do things in socket.io-"
"client look similar here! This is not a step-by-step tutorial for making "
"a Tic Tac Toe app, only adding the socket.io-client part of it."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:67
msgid "Setting up the Project"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:69
msgid ""
"From Xcode, create a new project with the layout of single-view iOS "
"application. You can name it whatever you like, Ill be naming mine "
"``TicTacIOiOS``. The next step is getting the code for ``socket.io-"
"client-swift``, you can either use ``git`` to clone the repo to a "
"directory, or simply download a release. Either way you get it, the "
"process of adding it to your project is the same. Simply drag the folder "
"named SwiftIO to the same place you copied SocketRocket! (Again making "
"sure you select copy.) And thats it, the hardest part of putting our app "
"together is done! At this point, if you want to test that its setup "
"properly, try building and running the app, it should compile."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:81
msgid "Adding Our Code"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:83
msgid ""
"Now, assuming youve created your user interface. Its time to add the code"
" that will interface with our socket.io server! In our demo application "
"we have one UIViewController subclass, named ViewController. All of our "
"code will be added there. First, we need to add a member named ``socket``"
" of type ``SocketIOClient`` to our ViewController."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:93
msgid ""
"Now, in our overridden ``viewDidLoad`` method we want to add two things, "
"a method call that will add our handlers to our socket, and a call to "
"connect our socket."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:103
msgid "Handlers"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:105
msgid ""
"Now that we have our method calls, its time to implement the method that "
"adds the handlers!"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:114
msgid ""
"Since were about to add the handlers, I think its worth mentioning the "
"syntax I use for closures in Swift. Swift has many different ways of "
"expressing closures, and they can be found here. But the form I use for "
"adding handlers is a trailing closure, without explicit type annotations."
" You can use other closure forms if you wish. Im not going to show you "
"all the handlers in our demo app here, just a few that demonstrate "
"important things youll need to know when working with ``socket.io-client-"
"swift``. The first handler were going to add is one that will be called "
"on any event, since its useful for debugging the API."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:130
msgid ""
"The next handler that well add is the one that tells the app that the "
"game has started."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:140
msgid ""
"Now to explain some things. ``[weak self]`` is a capture list. It tells "
"the compiler that the reference to self in this closure should not add to"
" the reference count of self. This is so when the socket object goes out "
"of scope, the capture made in the closure doesnt keep it from being "
"deallocated. The first parameter in all ``.on`` callbacks is an optional "
"NSArray, it will contain all the data received with the event, or nil. "
"The second parameter in the callback is an optional with the type of "
"AckEmitter. AckEmitter is simply a typealias of ``(AnyObject...) -&gt; "
"Void``. Well see this used later. The next handler well add is the one "
"for a win."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:159
msgid ""
"As mentioned before, this is new syntax for ``if let`` introduced in "
"Swift 1.2. It simplifies optional unwrapping (pyramid of doom). The "
"important thing to gather from this handler is that you do not need to "
"force unwrap the array to get the object. Also note that a JSON object "
"will be exposed to Swift as an NSDictionary. Another thing to note is "
"that for almost all your handlers that have data, youll be doing some "
"kind of optional unwrapping and type casting. This is an unfortunate "
"consequence of working with JavaScript. The final handler that Ill "
"demonstrate here is the one that handles whether the player wants to play"
" again."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:176
msgid ""
"In this simplified example, we simply send an acknowledgement to the "
"server that we dont ever want to play again. Remember that AckEmitter has"
" a variadic definition, so you can send multiple things at once if you "
"wanted."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:182
msgid "Emitting Events"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:184
msgid ""
"The next thing youâ€™ll probably want to know is how to send events from "
"the client. Youll be pleased to know that it has a form almost exactly "
"the same as socket.io-client! In our ViewController we have a method that"
" handles when a user wants to make a move. Without going into the logic "
"of that, well show how we send the data to the server."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:200
msgid ""
"Thats all you need to do for sending data! Some other examples of sending"
" which arent covered in our demo are:"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:204
msgid "Sending JSON"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:206
msgid ""
"As mentioned before, JSON in Swift is best represent as a Dictionary. "
"Thankfully for you, you dont need to worry about turning it into "
"something socket.io will understand, thats all done under-the-hood."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:219
msgid "Sending Binary"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:221
msgid ""
"Binary data is also handled by the client, so you dont need to worry "
"about it."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:232
msgid "Requesting Acks"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:234
msgid ""
"The client can also request that the server send an ack for an event. "
"This is done by using the ``emitWithAck`` method which returns an object "
"to which you can add a handler."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:245
msgid "A Note About Multitasking in iOS"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:247
msgid ""
"As you probably know, iOS is very picky about what you can do in the "
"background. As such, dont expect that your socket connection will survive"
" in the background! Youll probably stop receiving events within seconds "
"of the app going into the background. So its better to create a task that"
" will gracefully close the connection when it enters the background (via "
"AppDelegate), and then reconnect the socket when the app comes back into "
"the foreground. If you want to learn more about the client, check out the"
" README! We also invite you to contribute by submitting issues, patches, "
"documentation and examples."
msgstr ""

