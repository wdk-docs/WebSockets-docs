# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the WebSockets Docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: WebSockets Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-09 16:03+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:2
msgid "Introducing Socket.IO 1.0"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:4
msgid ""
"The first version of Socket.IO was created shortly after Node.JS made its"
" first appearance. I had been looking for a framework that easily enabled"
" me to push data from a server to a client for a long time, and even had "
"tried other approaches to server-side JavaScript."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:9
msgid ""
"At the time, the main focus was on an interface equivalent to the "
"upcoming ``WebSocket`` API that was in the process of standardization. I "
"was lucky to receive a lot of feedback from the community at the time "
"(including Node.JS’s creator) that helped shape the project into "
"something significantly more useful."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:15
msgid ""
"Socket.IO has thus become the ``EventEmitter`` of the web. Today I want "
"to talk about the work that has gone into 1.0 to round up this vision."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:18
msgid ""
"There’s a lot to say about Socket.IO 1.0, so if you’re short in time, "
"feel free to jump to the parts that are most interesting to you:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:21
msgid "`New engine <#New-engine>`_"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:22
msgid "`Binary support <#Binary-support>`_"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:23
msgid "`Automated testing <#Automated-Testing>`_"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:24
msgid "`Scalability <#Scalability>`_"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:25
msgid "`Integration <#Integration>`_"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:26
msgid "`Better debugging <#Better-debugging>`_"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:27
msgid "`Streamlined APIs <#Streamlined-APIs>`_"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:28
msgid "`CDN delivery <#CDN-delivery>`_"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:29
msgid "`Future innovation <#Future-innovation>`_"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:30
msgid "`Credits <#Credits>`_"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:33
msgid "New engine"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:35
msgid ""
"The Socket.IO codebase no longer deals with transports and browser "
"incompatibilities. That work has been relegated to a new module we’ve "
"been perfecting for months called Engine.IO that implements a WebSocket-"
"like API."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:40
msgid "The benefits of this particular modularization can’t be understated:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:42
msgid "For the Socket.IO end user, nothing changes. Just drop-in the new version!"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:44
msgid "A tremendous simplification in terms of codebase size and testing surface"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:47
msgid "The Socket.IO Server is now only 1234 lines of code."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:48
msgid "The Socket.IO Client is now only 976 lines of code."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:50
msgid "Future-proof flexibility"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:52
msgid ""
"If ``WebSocket`` is the only transport you want to support moving "
"forward, Engine.IO (with all its browser hacks and workarounds) can be "
"seamlessly removed."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:55
msgid ""
"Alternative transports such as vanilla Node.JS TCP Sockets or Google "
"Chrome Sockets can be trivially implemented."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:58
msgid ""
"This separation has also allowed us to innovate and perfect the transport"
" layer. One of my favorite improvements was introducing the idea of what "
"I call *transport feature detection*."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:62
msgid ""
"Once upon a time in the web, it was extremely common to simply sniff User"
" Agents to make decisions of what APIs to use or what behaviors to "
"enable. As JavaScript codebases became more complex and mature, it became"
" obvious that in order to *maximize reliability*, it made more sense to "
"directly test the APIs to see if they would behave as expected."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:68
msgid ""
"For example, simply checking that the *JSON* global is present does not "
"mean that *JSON.stringify* works, or even exists. It could have simply "
"meant that the user defined a JSON global of their own, or the "
"environment could have a broken JSON implementation."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:73
msgid ""
"Socket.IO never assumes that ``WebSocket`` will just work, because in "
"practice there’s a good chance that it won’t. Instead, it establishes a "
"connection with XHR or JSONP right away, and then attempts to **upgrade**"
" the connection to WebSocket. Compared to the fallback method which "
"relies on timeouts, this means that *none of your users will have a "
"degraded experience*."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:81
msgid "Binary support"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:83
msgid ""
"Users have been asking for the ability to send binary data for a while, "
"especially after ``WebSocket`` added support for it."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:86
msgid ""
"The main issue was that if we had modeled our binary support after the "
"``WebSocket`` API, its usefulness would have been fairly limited. "
"``WebSocket`` requires that you put your Socket either into “string mode”"
" or “binary mode”:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:97
msgid ""
"This is good for a low-level API, which is why Engine.IO now supports it,"
" but application developers most likely don’t want to send *only blobs*, "
"or encode everything as a blob manually prior to sending it out."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:101
msgid ""
"Socket.IO now supports emitting ``Buffer`` (from Node.JS), ``Blob``, "
"``ArrayBuffer`` and even ``File``, as part of any datastructure:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:116
#, python-format
msgid ""
"To test how useful it would be to support binary in this particular way "
"(and as a virtualization geek), I decided to replicate the Twitch Plays "
"Pokemon experiment 100% in JavaScript. Using a JavaScript gameboy "
"emulator, node-canvas, socket.io we came up with a server-rendered "
"collaborative game that even works on IE8. Check it out on "
"http://weplay.io (source code here)."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:135
msgid "The relevant code that sends the image data is:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:144
msgid ""
"The next experiment was to run an instance of QEMU running an image of "
"Windows XP, in honor of its retirement. Every player gets a 15 second "
"turn to control the machine. Check out the demo on "
"http://socket.computer. Here’s a video of your typical inception "
"scenario:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:162
msgid ""
"A key part of putting together this demo was connecting to the QEMU VNC "
"server and implementing the RFB protocol. As it’s usually the case with "
"Node.JS, the solution was a ``npm search rfb`` away."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:166
msgid ""
"Essentially, in order to minimize latency and have the best performance, "
"it’s best to notify clients *only* of the pieces of the screen that "
"changed. For example, if you move your mouse around, only little pieces "
"of the screen that surround the cursor are broadcasted. The node-rfb2 "
"module gives us a ``rect`` event with objects like the following:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:182
msgid ""
"It then became clear to me that our support for binary data would be "
"genuinely useful. All I had to do was call ``io.emit`` to pass that "
"object around, and let Socket.IO do the rest."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:186
msgid ""
"Just for fun, I also installed and ran one of my favorite first person "
"shooters:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:202
msgid "Automated Testing"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:204
msgid ""
"Every commit to the Socket.IO codebase now triggers a testing matrix "
"totaling to 25 browsers, including Android and iOS."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:207
msgid ""
"We accomplish this by having ``make test`` seamlessly set up a reverse "
"tunnel to ephemeral ports in your computer (thus making it accessible "
"from the outside world), and have them execute on the Sauce Labs cloud, "
"which is in charge of virtualizing and executing browsers on all the "
"environments we care about."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:214
msgid "Scalability"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:216
msgid ""
"We simplified the approach towards rooms and multi-node scalability "
"dramatically. Instead of storing and/or replicating data across nodes, "
"Socket.IO is now only concerned with passing events around."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:220
msgid ""
"If you want to scale out Socket.IO to multiple nodes, it now comes down "
"to two simple steps:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:223
msgid ""
"Turn on sticky load balancing (for example by origin IP address). This "
"ensures that long-polling connections for example always route requests "
"to the same node where buffers of messages could be stored."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:226
msgid "Implement the socket.io-redis adapter."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:234
msgid ""
"We have deprecated the ``Socket#set`` and ``Socket#get`` APIs. Packets "
"now simply get encoded and distributed to other nodes whenever you "
"broadcast, and we don’t deal with storage."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:238
msgid "This leads directly into our next goal: integration with other backends."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:241
msgid "Integration"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:243
msgid ""
"Chances are good that your existing application deployments are written "
"in a variety of languages and frameworks, and are not just limited to "
"Node.JS. Even if it was all Node.JS, you probably at some point want to "
"separate concerns of your application into different processes."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:248
msgid ""
"One of the processes might be in charge of hosting the Socket.IO server, "
"accepting connections, performing authentication, etc, and then another "
"part of your backend might end up in charge of *producing* messages."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:252
msgid ""
"To that end we’re introducing the socket.io-emitter project which hooks "
"into socket.io-redis to easily allow you to emit events to browsers from "
"anywhere:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:263
msgid "Tony Kovanen already created a PHP implementation:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:272
msgid ""
"This makes it really easy to turn any existing application into a "
"realtime application!"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:276
msgid "Better debugging"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:278
msgid ""
"Socket.IO is now completely instrumented by a minimalistic yet "
"tremendously powerful utility called debug by TJ Holowaychuk."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:281
msgid ""
"In the past, the Socket.IO server would default to logging everything out"
" to the console. This turned out to be annoyingly verbose for many users "
"(although extremely useful for others), and violates the Rule of Silence "
"of the Unix Philosophy:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:290
msgid ""
"**Rule of Silence**\\  Developers should design programs so that they do "
"not print unnecessary output. This rule aims to allow other programs and "
"developers to pick out the information they need from a program’s output "
"without having to parse verbosity."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:299
msgid ""
"The basic idea is that each module used by Socket.IO provides different "
"debugging scopes that give you insight into the internals. By default, "
"all output is suppressed, and you can opt into seeing messages by "
"supplying the ``DEBUG`` env variable (Node.JS) or the "
"``localStorage.debug`` property (Browsers)."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:305
msgid "You can see it in action for example on our homepage:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:320
msgid "Streamlined APIs"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:322
msgid ""
"The ``socket.io`` module now exports the attachment function directly "
"(previously ``.listen``). It’s even easier now to attach socket.io to a "
"HTTP server:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:331
msgid "or to make it listen on some port:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:337
msgid ""
"Before, to refer to everyone connected you had to use ``io.sockets``. Now"
" you can call directly on ``io``:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:348
msgid "CDN delivery"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:350
msgid ""
"One of the best decisions we made early on was that implementing a "
"Socket.IO server would not only give you access to the realtime protocol,"
" but Socket.IO itself would also serve the client."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:354
msgid "Normally, all you have to do is to include a snippet like this:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:360
msgid ""
"If you want to optimize access to the client by serving it near your "
"users, provide the maximum level of gzip compression (thanks to Google’s "
"zopfli and proper support for caching, you can now use our CDN. It’s "
"free, forever, and has built-in SSL support:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:370
msgid "Future innovation"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:372
msgid ""
"The core Socket.IO projects will continue to improve with lots of more "
"frequent releases, with the sole goal of improving reliability, speed and"
" making the codebase smaller and easier to maintain. Socket.IO 2.0 will "
"probably see us ditching support for some older browsers, and not "
"bundling some modules like the JSON serializer."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:378
msgid ""
"Most of the innovation in the Socket.IO world will happen outside of the "
"core codebases. The most important projects that I’ll be closely watching"
" are the following:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:383
msgid "socket.io-stream"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:385
msgid ""
"By adding this plugin, you’ll be able to send ``Stream`` objects so that "
"you can write memory-efficient programs. In the first example we loaded a"
" file into memory prior to emitting it, but the following should be "
"possible:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:399
msgid ""
"And on the client side you’ll receive a ``Stream`` object that emits "
"``data`` events."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:403
msgid "Tooling"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:405
msgid ""
"When you use Socket.IO you don’t care about transports, packets, frames, "
"TCP or WebSocket. You care about what events are sent back and forth."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:408
msgid ""
"Our goal is to have plugins for Web Inspector, Firefox Developer Tools "
"that allow you to easily introspect what events are being sent, when, and"
" what their parameters are."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:412
msgid ""
"This project is being led by the talented Nick LaGrow (Github), Samaan "
"Ghani (Github) and David Cummings (Twitter)."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:416
msgid "New languages and frameworks"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:418
msgid ""
"A lot of effort has gone into specing and documenting the Engine.IO "
"protocol and Socket.IO protocol."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:421
msgid ""
"The main goal behind this is that the Node.JS servers and clients become "
"the reference implementations for many other languages and frameworks. "
"Interoperability within the larger ecosystem is one of our biggest goals "
"for 2014 and beyond."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:427
msgid "Credits"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:429
msgid ""
"This release has been a big team effort. Special thanks go out to our new"
" core team:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:432
msgid ""
"Tony Kovanen (Github / Twitter) for his amazing work on Engine.IO binary "
"support and research into a variety of workarounds to support all "
"versions of iOS and Internet Explorer, his help in putting together this "
"website and rounding up the docs."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:437
msgid ""
"Kevin Roark (Github) for the entire development of the new Socket.IO "
"parser on top of Engine, the Socket.IO Computer demo, and help with docs,"
" issues and pull requests."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:441
msgid ""
"Roman Shtylman (Github / Twitter) for his work on zuul and localtunnel, "
"crucial to our testing architecture and our mission of reliability."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:445
msgid "And in no particular order:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:447
msgid ""
"Jay Borenstein (LinkedIn) for selecting Socket.IO as one of the projects "
"to mentor students on Open Source engineering as part of the Open Academy"
" project."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:451
msgid ""
"Michael Srb (Github), Mark Mokryn (Github), Eugen Dueck (Github), Afshin "
"Mehrabani (Github), Christoph Dorn (Github) and Mikito Takada (Github) "
"for several key Engine.IO patches."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:455
msgid ""
"Grant Timmerman (Github / Twitter) for his outstanding work on the new "
"Socket.IO example chat application, and multiple patches and issues "
"investigation."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:459
msgid ""
"Jxck (Github / Twitter) for his work on translation, documentations and "
"patches. ありがとう"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:462
msgid ""
"Arnout Kazemier (Github / Twitter) for his multiple contributions to "
"Engine.IO and Socket.IO"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:465
msgid ""
"Sauce Labs (Github / Twitter) for supporting open source projects with "
"free testing infrastructure."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:468
msgid ""
"Shihui Song (Github), Qiming Fang (Github) and Erluo Li for their work on"
" testing infrastructure."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:471
msgid ""
"Julian Salazar (Github) and Tianyiu Liu (Github) for their work on "
"reconnection and ongoing research into resource sharing between browser "
"tabs and messages synchronization."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:475
msgid ""
"Gal Koren (Github) for his fantastic work into modularization of the "
"codebases."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:478
msgid "Matt Walker (Twitter) for the beautiful Socket.IO logo."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:480
msgid ""
"Finally, I’m very grateful to my company Automattic for being a great "
"home to Open Source innovation."
msgstr ""

