# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the WebSockets Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: WebSockets Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-13 19:54+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:2
msgid "Introducing Socket.IO 1.0"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:4
msgid "The first version of Socket.IO was created shortly after Node.JS made its first appearance. I had been looking for a framework that easily enabled me to push data from a server to a client for a long time, and even had tried other approaches to server-side JavaScript."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:9
msgid "At the time, the main focus was on an interface equivalent to the upcoming ``WebSocket`` API that was in the process of standardization. I was lucky to receive a lot of feedback from the community at the time (including Node.JS’s creator) that helped shape the project into something significantly more useful."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:15
msgid "Socket.IO has thus become the ``EventEmitter`` of the web. Today I want to talk about the work that has gone into 1.0 to round up this vision."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:18
msgid "There’s a lot to say about Socket.IO 1.0, so if you’re short in time, feel free to jump to the parts that are most interesting to you:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:21
msgid "`New engine <#New-engine>`__"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:22
msgid "`Binary support <#Binary-support>`__"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:23
msgid "`Automated testing <#Automated-Testing>`__"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:24
msgid "`Scalability <#Scalability>`__"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:25
msgid "`Integration <#Integration>`__"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:26
msgid "`Better debugging <#Better-debugging>`__"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:27
msgid "`Streamlined APIs <#Streamlined-APIs>`__"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:28
msgid "`CDN delivery <#CDN-delivery>`__"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:29
msgid "`Future innovation <#Future-innovation>`__"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:30
msgid "`Credits <#Credits>`__"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:33
msgid "New engine"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:35
msgid "The Socket.IO codebase no longer deals with transports and browser incompatibilities. That work has been relegated to a new module we’ve been perfecting for months called Engine.IO that implements a WebSocket-like API."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:40
msgid "The benefits of this particular modularization can’t be understated:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:42
msgid "For the Socket.IO end user, nothing changes. Just drop-in the new version!"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:44
msgid "A tremendous simplification in terms of codebase size and testing surface"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:47
msgid "The Socket.IO Server is now only 1234 lines of code."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:48
msgid "The Socket.IO Client is now only 976 lines of code."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:50
msgid "Future-proof flexibility"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:52
msgid "If ``WebSocket`` is the only transport you want to support moving forward, Engine.IO (with all its browser hacks and workarounds) can be seamlessly removed."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:55
msgid "Alternative transports such as vanilla Node.JS TCP Sockets or Google Chrome Sockets can be trivially implemented."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:58
msgid "This separation has also allowed us to innovate and perfect the transport layer. One of my favorite improvements was introducing the idea of what I call *transport feature detection*."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:62
msgid "Once upon a time in the web, it was extremely common to simply sniff User Agents to make decisions of what APIs to use or what behaviors to enable. As JavaScript codebases became more complex and mature, it became obvious that in order to *maximize reliability*, it made more sense to directly test the APIs to see if they would behave as expected."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:68
msgid "For example, simply checking that the *JSON* global is present does not mean that *JSON.stringify* works, or even exists. It could have simply meant that the user defined a JSON global of their own, or the environment could have a broken JSON implementation."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:73
msgid "Socket.IO never assumes that ``WebSocket`` will just work, because in practice there’s a good chance that it won’t. Instead, it establishes a connection with XHR or JSONP right away, and then attempts to **upgrade** the connection to WebSocket. Compared to the fallback method which relies on timeouts, this means that *none of your users will have a degraded experience*."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:81
#: ../../source/socket.io/docs/info.rst:57
msgid "Binary support"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:83
msgid "Users have been asking for the ability to send binary data for a while, especially after ``WebSocket`` added support for it."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:86
msgid "The main issue was that if we had modeled our binary support after the ``WebSocket`` API, its usefulness would have been fairly limited. ``WebSocket`` requires that you put your Socket either into “string mode” or “binary mode”:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:97
msgid "This is good for a low-level API, which is why Engine.IO now supports it, but application developers most likely don’t want to send *only blobs*, or encode everything as a blob manually prior to sending it out."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:101
msgid "Socket.IO now supports emitting ``Buffer`` (from Node.JS), ``Blob``, ``ArrayBuffer`` and even ``File``, as part of any datastructure:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:116
msgid "To test how useful it would be to support binary in this particular way (and as a virtualization geek), I decided to replicate the Twitch Plays Pokemon experiment 100% in JavaScript. Using a JavaScript gameboy emulator, node-canvas, socket.io we came up with a server-rendered collaborative game that even works on IE8. Check it out on http://weplay.io (source code here)."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:135
msgid "The relevant code that sends the image data is:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:144
msgid "The next experiment was to run an instance of QEMU running an image of Windows XP, in honor of its retirement. Every player gets a 15 second turn to control the machine. Check out the demo on http://socket.computer. Here’s a video of your typical inception scenario:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:162
msgid "A key part of putting together this demo was connecting to the QEMU VNC server and implementing the RFB protocol. As it’s usually the case with Node.JS, the solution was a ``npm search rfb`` away."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:166
msgid "Essentially, in order to minimize latency and have the best performance, it’s best to notify clients *only* of the pieces of the screen that changed. For example, if you move your mouse around, only little pieces of the screen that surround the cursor are broadcasted. The node-rfb2 module gives us a ``rect`` event with objects like the following:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:182
msgid "It then became clear to me that our support for binary data would be genuinely useful. All I had to do was call ``io.emit`` to pass that object around, and let Socket.IO do the rest."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:186
msgid "Just for fun, I also installed and ran one of my favorite first person shooters:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:202
msgid "Automated Testing"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:204
msgid "Every commit to the Socket.IO codebase now triggers a testing matrix totaling to 25 browsers, including Android and iOS."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:207
msgid "We accomplish this by having ``make test`` seamlessly set up a reverse tunnel to ephemeral ports in your computer (thus making it accessible from the outside world), and have them execute on the Sauce Labs cloud, which is in charge of virtualizing and executing browsers on all the environments we care about."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:213
msgid "## Scalability"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:215
msgid "We simplified the approach towards rooms and multi-node scalability dramatically. Instead of storing and/or replicating data across nodes, Socket.IO is now only concerned with passing events around."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:219
msgid "If you want to scale out Socket.IO to multiple nodes, it now comes down to two simple steps:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:222
msgid "Turn on sticky load balancing (for example by origin IP address). This ensures that long-polling connections for example always route requests to the same node where buffers of messages could be stored."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:225
msgid "Implement the socket.io-redis adapter."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:233
msgid "We have deprecated the ``Socket#set`` and ``Socket#get`` APIs. Packets now simply get encoded and distributed to other nodes whenever you broadcast, and we don’t deal with storage."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:237
msgid "This leads directly into our next goal: integration with other backends."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:240
msgid "Integration"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:242
msgid "Chances are good that your existing application deployments are written in a variety of languages and frameworks, and are not just limited to Node.JS. Even if it was all Node.JS, you probably at some point want to separate concerns of your application into different processes."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:247
msgid "One of the processes might be in charge of hosting the Socket.IO server, accepting connections, performing authentication, etc, and then another part of your backend might end up in charge of *producing* messages."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:251
msgid "To that end we’re introducing the socket.io-emitter project which hooks into socket.io-redis to easily allow you to emit events to browsers from anywhere:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:262
msgid "Tony Kovanen already created a PHP implementation:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:271
msgid "This makes it really easy to turn any existing application into a realtime application!"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:274
msgid "## Better debugging"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:276
msgid "Socket.IO is now completely instrumented by a minimalistic yet tremendously powerful utility called debug by TJ Holowaychuk."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:279
msgid "In the past, the Socket.IO server would default to logging everything out to the console. This turned out to be annoyingly verbose for many users (although extremely useful for others), and violates the Rule of Silence of the Unix Philosophy:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:288
msgid "**Rule of Silence**\\  Developers should design programs so that they do not print unnecessary output. This rule aims to allow other programs and developers to pick out the information they need from a program’s output without having to parse verbosity."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:297
#: ../../source/socket.io/docs/logging-and-debugging.rst:13
msgid "The basic idea is that each module used by Socket.IO provides different debugging scopes that give you insight into the internals. By default, all output is suppressed, and you can opt into seeing messages by supplying the ``DEBUG`` env variable (Node.JS) or the ``localStorage.debug`` property (Browsers)."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:303
#: ../../source/socket.io/docs/logging-and-debugging.rst:19
msgid "You can see it in action for example on our homepage:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:317
msgid "## Streamlined APIs"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:319
msgid "The ``socket.io`` module now exports the attachment function directly (previously ``.listen``). It’s even easier now to attach socket.io to a HTTP server:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:328
msgid "or to make it listen on some port:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:334
msgid "Before, to refer to everyone connected you had to use ``io.sockets``. Now you can call directly on ``io``:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:345
msgid "CDN delivery"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:347
msgid "One of the best decisions we made early on was that implementing a Socket.IO server would not only give you access to the realtime protocol, but Socket.IO itself would also serve the client."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:351
msgid "Normally, all you have to do is to include a snippet like this:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:357
msgid "If you want to optimize access to the client by serving it near your users, provide the maximum level of gzip compression (thanks to Google’s zopfli and proper support for caching, you can now use our CDN. It’s free, forever, and has built-in SSL support:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:367
msgid "Future innovation"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:369
msgid "The core Socket.IO projects will continue to improve with lots of more frequent releases, with the sole goal of improving reliability, speed and making the codebase smaller and easier to maintain. Socket.IO 2.0 will probably see us ditching support for some older browsers, and not bundling some modules like the JSON serializer."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:375
msgid "Most of the innovation in the Socket.IO world will happen outside of the core codebases. The most important projects that I’ll be closely watching are the following:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:380
msgid "socket.io-stream"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:382
msgid "By adding this plugin, you’ll be able to send ``Stream`` objects so that you can write memory-efficient programs. In the first example we loaded a file into memory prior to emitting it, but the following should be possible:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:396
msgid "And on the client side you’ll receive a ``Stream`` object that emits ``data`` events."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:400
msgid "Tooling"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:402
msgid "When you use Socket.IO you don’t care about transports, packets, frames, TCP or WebSocket. You care about what events are sent back and forth."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:405
msgid "Our goal is to have plugins for Web Inspector, Firefox Developer Tools that allow you to easily introspect what events are being sent, when, and what their parameters are."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:409
msgid "This project is being led by the talented Nick LaGrow (Github), Samaan Ghani (Github) and David Cummings (Twitter)."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:412
msgid "### New languages and frameworks"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:414
msgid "A lot of effort has gone into specing and documenting the Engine.IO protocol and Socket.IO protocol."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:417
msgid "The main goal behind this is that the Node.JS servers and clients become the reference implementations for many other languages and frameworks. Interoperability within the larger ecosystem is one of our biggest goals for 2014 and beyond."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:423
msgid "Credits"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:425
msgid "This release has been a big team effort. Special thanks go out to our new core team:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:428
msgid "Tony Kovanen (Github / Twitter) for his amazing work on Engine.IO binary support and research into a variety of workarounds to support all versions of iOS and Internet Explorer, his help in putting together this website and rounding up the docs."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:433
msgid "Kevin Roark (Github) for the entire development of the new Socket.IO parser on top of Engine, the Socket.IO Computer demo, and help with docs, issues and pull requests."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:437
msgid "Roman Shtylman (Github / Twitter) for his work on zuul and localtunnel, crucial to our testing architecture and our mission of reliability."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:441
msgid "And in no particular order:"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:443
msgid "Jay Borenstein (LinkedIn) for selecting Socket.IO as one of the projects to mentor students on Open Source engineering as part of the Open Academy project."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:447
msgid "Michael Srb (Github), Mark Mokryn (Github), Eugen Dueck (Github), Afshin Mehrabani (Github), Christoph Dorn (Github) and Mikito Takada (Github) for several key Engine.IO patches."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:451
msgid "Grant Timmerman (Github / Twitter) for his outstanding work on the new Socket.IO example chat application, and multiple patches and issues investigation."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:455
msgid "Jxck (Github / Twitter) for his work on translation, documentations and patches. ありがとう"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:458
msgid "Arnout Kazemier (Github / Twitter) for his multiple contributions to Engine.IO and Socket.IO"
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:461
msgid "Sauce Labs (Github / Twitter) for supporting open source projects with free testing infrastructure."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:464
msgid "Shihui Song (Github), Qiming Fang (Github) and Erluo Li for their work on testing infrastructure."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:467
msgid "Julian Salazar (Github) and Tianyiu Liu (Github) for their work on reconnection and ongoing research into resource sharing between browser tabs and messages synchronization."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:471
msgid "Gal Koren (Github) for his fantastic work into modularization of the codebases."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:474
msgid "Matt Walker (Twitter) for the beautiful Socket.IO logo."
msgstr ""

#: ../../source/socket.io/_posts/20140528-1.0.0.rst:476
msgid "Finally, I’m very grateful to my company Automattic for being a great home to Open Source innovation."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:2
msgid "Native Socket.IO and Android"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:5
msgid "In this tutorial well learn how to create a chat client that communicates with a Socket.IO Node.JS chat server, with our native Android Client! If you want to jump straight to the code, its on GitHub. Otherwise, read on!"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:11
#: ../../source/socket.io/_posts/20150309-ios.rst:58
#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:26
#: ../../source/socket.io/get-started.rst:9
msgid "Introduction"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:13
msgid "To follow along, start by cloning the repository: socket.io-android-chat."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:16
msgid "The app has the following features:"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:18
msgid "Sending a message to all users joining to the room."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:19
msgid "Notifies when each user joins or leaves."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:20
msgid "Notifies when an user start typing a message."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:22
msgid "Socket.IO provides an event-oriented API that works across all networks, devices and browsers. Its incredibly robust (works even behind corporate proxies!) and highly performant, which is very suitable for multiplayer games or realtime communication."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:28
msgid "Installing the Dependencies"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:30
msgid "The first step is to install the Java Socket.IO client with Gradle."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:32
msgid "For this app, we just add the dependency to ``build.gradle``:"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:42
msgid "We must remember adding the internet permission to ``AndroidManifest.xml``."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:53
msgid "Now we can use Socket.IO on Android!"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:56
msgid "Using socket in Activity and Fragment"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:58
msgid "First, we have to initialize a new instance of Socket.IO as follows:"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:78
msgid "``IO.socket()`` returns a socket for ``http://chat.socket.io`` with the default options. Notice that the method caches the result, so you can always get a same ``Socket`` instance for an url from any Activity or Fragment. And we explicitly call ``connect()`` to establish the connection here (unlike the JavaScript client). In this app, we use ``onCreate`` lifecycle callback for that, but it actually depends on your application."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:87
#: ../../source/socket.io/get-started.rst:220
msgid "Emitting events"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:89
msgid "Sending data looks as follows. In this case, we send a string but you can do JSON data too with the org.json package, and even binary data is supported as well!"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:108
msgid "Listening on events"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:110
msgid "Like I mentioned earlier, Socket.IO is **bidirectional**, which means we can send events to the server, but also at any time during the communication the server can send events to us."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:114
msgid "We then can make the socket listen an event on ``onCreate`` lifecycle callback."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:127
msgid "With this we listen on the ``new message`` event to receive messages from other users."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:157
msgid "This is what ``onNewMessage`` looks like. A listener is an instance of ``Emitter.Listener`` and must be implemented the ``call`` method. Youll notice that inside of ``call()`` is wrapped by ``Activity#runOnUiThread()``, that is because the callback is always called on another thread from Android UI thread, thus we have to make sure that adding a message to view happens on the UI thread."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:165
msgid "Managing Socket State"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:167
msgid "Since an Android Activity has its own lifecycle, we should carefully manage the state of the socket also to avoid problems like memory leaks. In this app, we’ll close the socket connection and remove all listeners on ``onDestroy`` callback of Activity."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:182
msgid "Calling ``off()`` removes the listener of the ``new message`` event."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:185
msgid "Further reading"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:187
msgid "If you want to explore more, I recommend you look into:"
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:189
msgid "Other features of this app. They are just implemented with ``emit()``, ``on()`` and ``off()``."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:192
msgid "The details of Socket.IO Java Client. It supports all the features JS client does."
msgstr ""

#: ../../source/socket.io/_posts/20150120-native-socket-io-and-android.rst:195
msgid "Many other great Socket.IO implementations created by the community!"
msgstr ""

#: ../../source/socket.io/_posts/20150204-1.3.3.rst:2
msgid "Socket.IO 1.3.3"
msgstr ""

#: ../../source/socket.io/_posts/20150204-1.3.3.rst:5
msgid "Socket.IO **1.3.3** is a backwards-compatible **recommended upgrade** for everyone."
msgstr ""

#: ../../source/socket.io/_posts/20150204-1.3.3.rst:8
msgid "It addresses a bug in the parser that could break the decoder with maliciously-crafted binary packets."
msgstr ""

#: ../../source/socket.io/_posts/20150204-1.3.3.rst:11
msgid "We now *warn* about errors in the console if you dont manually specify an ``error`` event handler for ``Socket`` objects on the server."
msgstr ""

#: ../../source/socket.io/_posts/20150204-1.3.3.rst:15
msgid "As usual, you can grab the latest client from the CDN!"
msgstr ""

#: ../../source/socket.io/_posts/20150214-1.3.4.rst:2
msgid "Socket.IO 1.3.4"
msgstr ""

#: ../../source/socket.io/_posts/20150214-1.3.4.rst:5
msgid "Socket.IO **1.3.4** corrects the ``1.3.3`` build that included extra unused code."
msgstr ""

#: ../../source/socket.io/_posts/20150303-1.3.5.rst:2
msgid "Socket.IO 1.3.5"
msgstr ""

#: ../../source/socket.io/_posts/20150303-1.3.5.rst:5
msgid "Socket.IO **1.3.5** addresses a parser issue. Upgrade recommended. Completely backwards-compatible."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:2
msgid "Socket.IO on iOS"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:20
msgid "We are pleased to announce the immediate availability of the Socket.IO Swift Client! Youll now be able to write code that runs natively on **iOS** and **OSX**, while maintaining the simplicity and expressiveness of the JavaScript client!"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:36
msgid "To show how you can use it in a real project, Ill show you how to create a small Tic Tac Toe app like the one shown above."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:40
msgid "Overview"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:42
msgid "In this tutorial well look at creating a small iOS app that demonstrates socket.io and iOS. If you learn better from looking at code you can look at it here. The point of the tutorial is not to explain developing an iOS app, but to demonstrate how you can incorporate ``socket.io-client-swift`` into your projects! So it is assumed you have a basic knowledge of XCode. Note: This example uses Swift 1.2. However, 1.2 isnt much different from Swift 1.1, and the library has branches for Swift 1.1 and 1.2. The only difference in this guide is I use 1.2s expanded ``if let`` construct to avoid nesting. Note 2: While this library is written in, and meant for, Swift applications, it can be used with Objective-C projects, but will require some extra work (youll probably need to create a Swift class that can interface with your Objective-C code, as not all methods in the client will be available to Objective-C i.e emit, onAny). See this for more information."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:60
msgid "I designed ``socket.io-client-swift`` to be as close to ``socket.io-client`` as I could. So many of the ways you do things in socket.io-client look similar here! This is not a step-by-step tutorial for making a Tic Tac Toe app, only adding the socket.io-client part of it."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:67
msgid "Setting up the Project"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:69
msgid "From Xcode, create a new project with the layout of single-view iOS application. You can name it whatever you like, Ill be naming mine ``TicTacIOiOS``. The next step is getting the code for ``socket.io-client-swift``, you can either use ``git`` to clone the repo to a directory, or simply download a release. Either way you get it, the process of adding it to your project is the same. Simply drag the folder named SwiftIO to the same place you copied SocketRocket! (Again making sure you select copy.) And thats it, the hardest part of putting our app together is done! At this point, if you want to test that its setup properly, try building and running the app, it should compile."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:81
msgid "Adding Our Code"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:83
msgid "Now, assuming youve created your user interface. Its time to add the code that will interface with our socket.io server! In our demo application we have one UIViewController subclass, named ViewController. All of our code will be added there. First, we need to add a member named ``socket`` of type ``SocketIOClient`` to our ViewController."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:93
msgid "Now, in our overridden ``viewDidLoad`` method we want to add two things, a method call that will add our handlers to our socket, and a call to connect our socket."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:103
msgid "Handlers"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:105
msgid "Now that we have our method calls, its time to implement the method that adds the handlers!"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:114
msgid "Since were about to add the handlers, I think its worth mentioning the syntax I use for closures in Swift. Swift has many different ways of expressing closures, and they can be found here. But the form I use for adding handlers is a trailing closure, without explicit type annotations. You can use other closure forms if you wish. Im not going to show you all the handlers in our demo app here, just a few that demonstrate important things youll need to know when working with ``socket.io-client-swift``. The first handler were going to add is one that will be called on any event, since its useful for debugging the API."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:130
msgid "The next handler that well add is the one that tells the app that the game has started."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:140
msgid "Now to explain some things. ``[weak self]`` is a capture list. It tells the compiler that the reference to self in this closure should not add to the reference count of self. This is so when the socket object goes out of scope, the capture made in the closure doesnt keep it from being deallocated. The first parameter in all ``.on`` callbacks is an optional NSArray, it will contain all the data received with the event, or nil. The second parameter in the callback is an optional with the type of AckEmitter. AckEmitter is simply a typealias of ``(AnyObject...) -&gt; Void``. Well see this used later. The next handler well add is the one for a win."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:159
msgid "As mentioned before, this is new syntax for ``if let`` introduced in Swift 1.2. It simplifies optional unwrapping (pyramid of doom). The important thing to gather from this handler is that you do not need to force unwrap the array to get the object. Also note that a JSON object will be exposed to Swift as an NSDictionary. Another thing to note is that for almost all your handlers that have data, youll be doing some kind of optional unwrapping and type casting. This is an unfortunate consequence of working with JavaScript. The final handler that Ill demonstrate here is the one that handles whether the player wants to play again."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:176
msgid "In this simplified example, we simply send an acknowledgement to the server that we dont ever want to play again. Remember that AckEmitter has a variadic definition, so you can send multiple things at once if you wanted."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:182
msgid "Emitting Events"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:184
msgid "The next thing you’ll probably want to know is how to send events from the client. Youll be pleased to know that it has a form almost exactly the same as socket.io-client! In our ViewController we have a method that handles when a user wants to make a move. Without going into the logic of that, well show how we send the data to the server."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:200
msgid "Thats all you need to do for sending data! Some other examples of sending which arent covered in our demo are:"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:204
msgid "Sending JSON"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:206
msgid "As mentioned before, JSON in Swift is best represent as a Dictionary. Thankfully for you, you dont need to worry about turning it into something socket.io will understand, thats all done under-the-hood."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:219
msgid "Sending Binary"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:221
msgid "Binary data is also handled by the client, so you dont need to worry about it."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:232
msgid "Requesting Acks"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:234
msgid "The client can also request that the server send an ack for an event. This is done by using the ``emitWithAck`` method which returns an object to which you can add a handler."
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:245
msgid "A Note About Multitasking in iOS"
msgstr ""

#: ../../source/socket.io/_posts/20150309-ios.rst:247
msgid "As you probably know, iOS is very picky about what you can do in the background. As such, dont expect that your socket connection will survive in the background! Youll probably stop receiving events within seconds of the app going into the background. So its better to create a task that will gracefully close the connection when it enters the background (via AppDelegate), and then reconnect the socket when the app comes back into the foreground. If you want to learn more about the client, check out the README! We also invite you to contribute by submitting issues, patches, documentation and examples."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:2
msgid "Socket.IO C++"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:5
msgid "I’m really proud to announce the first release of the Socket.IO C++ Client on GitHub!"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:8
msgid "Based on Boost and WebSocket++, this full-featured Socket.IO 1.0 client has the fundamental advantage of working on **multiple platforms**. Check out the directory of examples. It contains examples of iOS, QT, and CLI chat clients!"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:13
msgid "To learn how to use this client, I put together a QT chat example that communicates using a Socket.IO Node.JS chat server. Keep reading for step-by-step instructions."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:28
msgid "If you’d like to follow along, begin by cloning the socket.io-client-cpp repository using the following:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:35
msgid "The app includes the following features:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:37
msgid "Send messages to all users joining the room."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:38
msgid "Receive a notification when users join or leave the room."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:39
msgid "Receive notifications when a user starts typing a message."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:41
msgid "Before you get started, visit the QT community to download and install QT."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:45
msgid "Creating a QT GUI Application"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:47
msgid "Launch the QT Creator."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:49
msgid "On the welcome page, select ``New Project``, then create a ``QT Widget Application.`` Name it ``SioChatDemo.``"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:52
msgid "The project structure should look like this:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:67
msgid "Importing an SioClient"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:69
msgid "Lets copy the SioClient into the QT project under the subfolder ``sioclient.``"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:72
msgid "Edit ``SioChatDemo.pro`` to configure paths and compile options by simply adding:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:86
msgid "Add two additional compile options:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:93
msgid "The ``no_keywords`` flag prevents ``qmake`` from treating some function names as ``emit`` as the keyword for the signal-slot mechanism."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:96
msgid "Use ``c++11`` to ask for C++11 support."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:99
msgid "Importing Boost"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:101
msgid "We now have our boost ``headers`` and a fat boost ``static lib`` named ``libboost.a``\\ (non-win32) or ``boost.lib``\\ (win32)."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:104
msgid "To import them, we need to edit ``SioChatDemo.pro`` again by adding a header including the following:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:111
msgid "Linker options:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:120
msgid "Create the Main Window UI"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:122
msgid "Create a simple UI by dragging and dropping a widget from the widget box on the left-hand side."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:133
msgid "It contains the following:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:135
msgid "A ``QLineEdit`` at the top to input a nickname: ``nickNameEdit``"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:136
msgid "A ``QPushButton`` at the top right for login: ``loginBtn``"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:137
msgid "A ``QListWidget`` in the center for showing messages: ``listView``"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:138
msgid "A ``QLineEdit`` at the bottom for typing messages: ``messageEdit``"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:139
msgid "A ``QPushButton`` at the bottom right for sending messages: ``sendBtn``"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:143
msgid "Add Slots in the Main Window"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:145
msgid "The following slots need to be added in the ``mainwindow`` class to handle UI events:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:148
msgid "Click ‘Login’ button"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:149
msgid "Click ‘Send Message’ button"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:150
msgid "Text change in message editing (to show typing status)"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:151
msgid "Return message editing (for sending responses)"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:153
msgid "Insert the following code into the ``MainWindow`` class in ``mainwindow.h``:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:165
msgid "Connect the UI Event Signal and Slots"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:167
msgid "Open ``mainwindow.ui`` in the design mode. Switch to the ``signals/slots`` mode using ``Menu->Edit->Edit Signals/Slots``."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:170
msgid "Click and hold the widget and drag it to the window (the cursor will become an electrical ground symbol) to open the connection editor."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:173
msgid "In the connection editor, edit the main window slots on the right side. Add the slot function names added in ``mainwindow.h`` before."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:176
msgid "Then we can connect the event signal to the widget with our own slots. The result should look like this:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:188
msgid "Adding UI Refresh Signals/Slots"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:190
msgid "The ``sio::client`` callbacks are not in the UI thread. However, the UI must be updated with those callbacks, so we need a signal for the non-UI thread to request the ``slots`` functions in the UI thread. To signal that ``QListWidgetItem`` has been added, insert the following:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:211
msgid "Then connect them in the ``MainWindow`` constructor."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:218
msgid "Setting up the Socket"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:220
msgid "For single-window applications, simply let ``MainWindow`` class hold the ``sio::client`` object by declaring a ``unique_ptr`` member of the ``sio::client`` and several event handling functions in ``mainwindow.h``."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:240
msgid "Initialize ``sio::client`` and setup event bindings for the default ``socket`` in the ``MainWindow`` constructor."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:243
msgid "We also need to handle connectivity and disconnect events."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:245
msgid "Add the following to the ``MainWindow`` constructor:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:276
msgid "Managing Connection State"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:278
msgid "We have several connection listeners for connection events."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:280
msgid "First, we want to send a login message when were connected; we get the default ``socket`` from the ``client`` to do that."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:292
msgid "If the connection closes or fails, we need to restore the UI before we connect."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:295
msgid "\\````cpp void MainWindow::OnClosed(client::close_reason const& reason) { //restore UI to pre-login state }"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:298
msgid "void MainWindow::OnFailed() { //restore UI to pre-login state }"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:316
msgid "Handling Socket.IO Events"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:318
msgid "We’ll need to handle socket.io events in our functions they are bound to."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:321
msgid "For example, we need to show received messages in the list view."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:342
msgid "Wrapping Up: Sending the Message"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:344
msgid "When ``sendBtn`` is clicked, we need to send the text in ``messageEdit`` to the chatroom."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:347
msgid "Add the following code to ``SendBtnClicked()``:"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:369
msgid "Further Reading"
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:371
msgid "You can run the demo project to get a closer look. Before you run it, please follow the instructions to make the Socket.io client library."
msgstr ""

#: ../../source/socket.io/_posts/20150413-socket-io-cpp.rst:374
msgid "Don’t forget to star the project on GitHub to get updates!"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:2
msgid "Socket.IO P2P"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:5
msgid "Today were very happy to introduce Socket.IO P2P, the easiest way to establish **a bidirectional events channel between two peers** with a server fallback to provide maximum reliability."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:9
msgid "Lets look at the API and build a little chat application. Or check out the repository directly!"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:20
msgid "**Socket.IO P2P** provides an **easy and reliable** way to setup a WebRTC connection between peers and communicate using the socket.io-protocol."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:24
msgid "Socket.IO is used to transport signaling data and as a fallback for clients where the WebRTC ``PeerConnection`` is not supported. Adding a simple piece of middleware to your socket.io setup enables this – no need to hand roll your own signaling exchange or set up, deploy and scale new servers."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:31
msgid "Usage"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:33
msgid "It only takes a few lines of code to set up the server and client."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:35
msgid "Server:"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:43
msgid "Client:"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:55
msgid "There are various options for the advanced user. Once signaling data has been exchanged an ``upgrade`` event is triggered and an optional callback is called."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:67
msgid "The Chat example"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:69
msgid "We will build a simple chat application, as our tradition dictates, but with P2P capabilities! In this application:"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:72
msgid "Clients can send text messages to each other. Messages display in a timeline"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:74
msgid "Clients connect to each other over socket.io and initially send messages via the server"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:76
msgid "Clients can choose to **go private** – switching the transport to WebRTC"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:78
msgid "All clients connected to the server can connect via WebRTC up to a maximum of 10 clients"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:81
msgid "All code from this example is included in the main repository."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:83
msgid "We first setup the client with ``autoUpgrade`` set to false so that clients can upgrade the connection themselves. Set ``numClients`` to ``10`` to allow up to 10 clients to connect with each other."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:92
msgid "Setup the event listeners:"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:104
msgid "In this example, we want any clients connecting to the server to exchange signaling data with each other. We can use the server component as a simple middleware. Clients will connect on the root namespace."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:108
msgid "If we wanted clients to exchange signalling data in rooms, rather than on a whole namespace, we could use the server module upon connection like this."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:120
msgid "We then setup listeners to pass messages between clients and to broadcast the ``go-private`` event."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:136
msgid "Thats all you need: add a little markup we are off! Heres the demo application in action:"
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:139
msgid "Thanks to Guillermo Rauch (@rauchg) for the advice, testing and patience, Harrison Harnisch (@hharnisc) for bug fixes and to Feross Aboukhadijeh (@feross) for providing the underlying WebRTC abstraction simple-peer."
msgstr ""

#: ../../source/socket.io/_posts/20150714-p2p.rst:144
msgid "Pull requests, issues, comments and general rantings are all welcome over at the GitHub repo."
msgstr ""

#: ../../source/socket.io/_posts/20150715-1.3.6.rst:2
msgid "Socket.IO 1.3.6"
msgstr ""

#: ../../source/socket.io/_posts/20150715-1.3.6.rst:5
msgid "Socket.IO **1.3.6** addresses a build issue with the ``ws`` module on Windows."
msgstr ""

#: ../../source/socket.io/_posts/20150921-1.3.7.rst:2
msgid "Socket.IO 1.3.7"
msgstr ""

#: ../../source/socket.io/_posts/20150921-1.3.7.rst:4
msgid "Socket.IO **1.3.7** includes support for io.js and Node.JS 4.0.0."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:2
msgid "Socket.IO 1.4.0"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:5
msgid "Socket.IO 1.4.0 ship with new features like **automatic compression** for XHR and WebSockets, lots of bug fixes and significant performance and memory improvements."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:9
msgid "Compression is enabled by default, as it’s highly beneficial for most application payloads. The following example shows the savings for a realtime stream of tweets."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:16
msgid "The compression gains will vary by transport. For example, WebSocket defaults to a window size of 32kb when **DEFLATE** compression is enabled. Repeated occurrences of strings within that window will be compressed. The following demo (inspired by Julia Evans work) will highlight what the LZ77 algorithm de-duplicates from the traffic sent by the Twitter stream that matches javascript."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:30
msgid "How this demo works: we re-implemented a part of LZ77 in JavaScript. A React component then renders the compressed strings."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:33
msgid "The longer the string, the darker the shade of yellow displayed."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:35
msgid "In addition to this default behavior, we’ve introduced the capability to perform selective per-message compression, by introducing the ``compress`` flag when emitting an event."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:43
msgid "To configure the defaults, we’ve introduced the following two options that you can pass to socket.io (and engine.io) when starting the server:"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:46
msgid "``perMessageDeflate`` – options to customize WebSocket compression (see here) or ``true`` for defaults (``true``)."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:49
msgid "``httpCompression`` – options to customize compression for HTTP polling transports or ``true`` for defaults (``true``)"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:52
msgid "The memory overhead when compression is enabled is not inexistent, however. Make sure to account for a 300kb~ overhead per connection in terms of memory allocation. Read here about the parameters you can customize to change how much memory is allocated and how aggressively data is compressed."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:58
msgid "The following improvements have been made to the **server**:"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:60
msgid "Assume 443 port when passing ``https://`` to the ``origins`` parameter – Evan Lucas"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:62
msgid "Improve detection of binary data inside events (in the ``has-binary`` module) – Gunther Brunner"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:64
msgid "Warn about missing ``error`` event handlers on sockets to prevent silent hard-to-debug situations"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:66
msgid "Allow a custom function for the ``allowRequest`` function for origins verification"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:68
#: ../../source/socket.io/_posts/20160106-1.4.0.rst:91
msgid "Fixes for “use strict” environments – Naoyuki Kanezawa"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:69
msgid "Prevent users calling the ack function multiple times – Kevin Jose Martin"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:71
msgid "Fixed potential memory leaks with open sockets when upgrade fails – Naoyuki Kanezawa"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:73
msgid "Fix lingering requests when a polling error occurs – Naoyuki Kanezawa"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:74
msgid "Drastically more memory efficient when keeping track of clients – Damien Arrachequesne"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:76
msgid "Drastically more memory efficient when keeping track of rooms – Jérémy Lal"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:78
msgid "Trigger callback if the client is already in the given room when ``join`` is called – Damien Arrachequesne"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:80
msgid "Minor parser fixes and performance improvements."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:82
msgid "The following improvements have been made to the **client**:"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:84
msgid "Fix for specifying custom ports when connecting"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:85
msgid "2 or more connections to the same namespace now create new sockets, instead of reusing a single one."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:87
msgid "Added new reserved ``ping`` and ``pong`` events when a heartbeat is emitted and received."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:89
msgid "Add support for environments that extend Object.prototype – Damien Arrachequesne"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:92
msgid "Added an ``extraHeaders`` feature for custom headers in HTTP transports (non-WebSocket)"
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:94
msgid "Fix handling of disconnection while in the ``opening`` state."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:95
msgid "Improved error handling for unmatched acknowledgements."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:96
msgid "Parser fixes and improvements."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:98
msgid "We’ve also released **socket.io-redis** ``0.2.0`` with significant performance improvements."
msgstr ""

#: ../../source/socket.io/_posts/20160106-1.4.0.rst:101
msgid "Special thanks to Damien Arrachequesne, Naoyuki Kanezawa and Jérémy Lal for their amazing and continued contributions that made this release possible."
msgstr ""

#: ../../source/socket.io/_posts/20160108-1.4.x.rst:2
msgid "Socket.IO 1.4.1, 1.4.2 and 1.4.3"
msgstr ""

#: ../../source/socket.io/_posts/20160108-1.4.x.rst:5
msgid "We published three minor releases right after ``1.4.0`` addressing build issues in different environments."
msgstr ""

#: ../../source/socket.io/_posts/20160108-1.4.x.rst:8
msgid "Socket.IO-client now includes the latest version of engine.io-client"
msgstr ""

#: ../../source/socket.io/_posts/20160108-1.4.x.rst:10
msgid "Fixed an issue that was preventing bundling with webpack."
msgstr ""

#: ../../source/socket.io/_posts/20160108-1.4.x.rst:12
msgid "Socket.IO now adds support for NativeScript!"
msgstr ""

#: ../../source/socket.io/_posts/20160111-1.4.4.rst:2
msgid "Socket.IO 1.4.4"
msgstr ""

#: ../../source/socket.io/_posts/20160111-1.4.4.rst:5
msgid "We just published two fixes for ``socket.io-client``:"
msgstr ""

#: ../../source/socket.io/_posts/20160111-1.4.4.rst:7
msgid "Building with ``browserify`` or ``webpack`` is now completely straightforward. No need to ``exclude/ignore`` or ``noParse/externals`` the ``ws`` module."
msgstr ""

#: ../../source/socket.io/_posts/20160111-1.4.4.rst:11
msgid "Improved the JSONP transport when ``socket.io-client`` or ``engine.io-client`` are lazily evaluated or the ``<script>`` tag that included them gets removed."
msgstr ""

#: ../../source/socket.io/_posts/20160111-1.4.4.rst:15
#: ../../source/socket.io/_posts/20160127-1.4.5.rst:12
#: ../../source/socket.io/_posts/20170513-2-0-0.rst:41
#: ../../source/socket.io/_posts/20170624-2.0.x.rst:16
msgid "Get the latest client from the CDN:"
msgstr ""

#: ../../source/socket.io/_posts/20160127-1.4.5.rst:2
msgid "Socket.IO 1.4.5"
msgstr ""

#: ../../source/socket.io/_posts/20160127-1.4.5.rst:5
msgid "We just published some quick fixes!"
msgstr ""

#: ../../source/socket.io/_posts/20160127-1.4.5.rst:7
msgid "Fixed ``socket.io-client`` usage with `NativeScript <https://www.nativescript.org/>`__."
msgstr ""

#: ../../source/socket.io/_posts/20160127-1.4.5.rst:9
msgid "Fixed graceful close of the attached http ``Server`` of ``socket.io`` and ``engine.io``."
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:2
msgid "Socket.IO 2.0.0"
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:4
msgid "Socket.IO 2.0.0 is finally here! This major release brings several performance improvements:"
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:7
msgid "`uws <https://github.com/uWebSockets/uWebSockets>`__ is now the default Websocket engine. It should bring significant improvement in performance (particularly in terms of memory consumption) (`release note of Engine.IO <https://github.com/socketio/engine.io/releases/tag/2.0.0>`__)"
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:13
msgid "the Engine.IO and Socket.IO handshake packets were merged, reducing the number of roundtrips necessary to establish a connection. (`#2833 <https://github.com/socketio/socket.io/pull/2833>`__)"
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:17
msgid "it is now possible to provide a custom parser according to the needs of your application (`#2829 <https://github.com/socketio/socket.io/pull/2829>`__). Please take a look at the `example <https://github.com/socketio/socket.io/tree/master/examples/custom-parsers>`__ for more information."
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:24
msgid "Please note that this release is not backward-compatible, due to:"
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:26
msgid "a breaking change related to utf-8 encoding in `engine.io-parser <https://github.com/socketio/engine.io-parser/pull/81>`__"
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:29
msgid "an update to make the socket id on the client match the id on the server-side (`#1058 <https://github.com/socketio/socket.io-client/pull/1058>`__)"
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:33
msgid "Related packages were updated accordingly:"
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:35
msgid "socket.io-redis version `5.x <https://github.com/socketio/socket.io-redis/releases/tag/5.0.0>`__"
msgstr ""

#: ../../source/socket.io/_posts/20170513-2-0-0.rst:38
msgid "socket.io-emitter version `3.x <https://github.com/socketio/socket.io-emitter/releases/tag/3.0.0>`__"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:2
msgid "Socket.IO is on Open Collective"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:4
msgid "Open Collective provides a transparent, sustainable, and secure way for people to support and sponsor open source projects. We are joining other great projects (you may have heard about MochaJS, GulpJS or webpack, among lots of other awesome projects) in the quest to ensure the project’s sustainability."
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:10
msgid "## What is an Open Collective?"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:12
msgid "From their website:"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:14
msgid "*An Open Collective is a group of people with a shared mission that operates in full transparency.*"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:17
msgid "That allows both individuals and companies to sponsor our mission at Socket.IO (with potential tax benefits)."
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:21
msgid "What would Socket.IO do with my sponsorship?"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:23
msgid "That will enable the core contributors to spend more time assuring the maintenance of the project. That includes:"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:26
msgid "triaging issues and pull requests"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:28
msgid "answering questions on Slack and Stackoverflow (which have been somewhat neglected recently)"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:31
msgid "updating the documentation (I think a lot has been done recently, but there is still room for improvement!)"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:34
msgid "Personally I would like to be able to devote a few days a month to the project (I mean a whole day of work, not a few hours taken here and there, usually late in the evening)."
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:38
msgid "The goals in the near future:"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:40
msgid "keep the 2.0 version as stable as possible"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:41
msgid "provide a complete documentation"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:42
msgid "add more examples, besides the classic chat"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:45
msgid "How can I help?"
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:47
msgid "To become a sponsor or backer, visit our open collective page and follow the instructions for becoming a part of our collective. Please also take the time to explore the other awesome collectives that people are supporting."
msgstr ""

#: ../../source/socket.io/_posts/20170515-open-collective.rst:52
msgid "And finally, a big thanks to Pia Mancini and her partners for making this possible."
msgstr ""

#: ../../source/socket.io/_posts/20170624-2.0.x.rst:2
msgid "Socket.IO 2.0.1, 2.0.2 and 2.0.3"
msgstr ""

#: ../../source/socket.io/_posts/20170624-2.0.x.rst:4
msgid "We published three minor releases right after ``2.0.0``, so please be sure to use the latest version! Including:"
msgstr ""

#: ../../source/socket.io/_posts/20170624-2.0.x.rst:7
msgid "A fix for a race condition within middleware: `Issue #2935 <https://github.com/socketio/socket.io/issues/2935>`__"
msgstr ""

#: ../../source/socket.io/_posts/20170624-2.0.x.rst:10
msgid "A fix for a potential race condition when emitting to a room: `Issue #2962 <https://github.com/socketio/socket.io/issues/2962>`__"
msgstr ""

#: ../../source/socket.io/_posts/20170624-2.0.x.rst:13
msgid "A fix for the *query* option in the client: `Issue #1086 <https://github.com/socketio/socket.io-client/issues/1086>`__"
msgstr ""

#: ../../source/socket.io/_posts/index.rst:2
msgid "Release history"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:2
msgid "IO"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:4
msgid "Exposed as the ``io`` namespace in the standalone build, or the result of calling ``require('socket.io-client')``."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:21
msgid "io.protocol"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:23
msgid "*(Number)*"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:25
msgid "The protocol revision number."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:28
msgid "io([url][, options])"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:30
msgid "``url`` *(String)* (defaults to ``window.location``)"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:31
#: ../../source/socket.io/client-api/IO.rst:264
#: ../../source/socket.io/client-api/IO.rst:613
#: ../../source/socket.io/client-api/Manager.rst:9
#: ../../source/socket.io/client-api/Manager.rst:358
#: ../../source/socket.io/server-api/API.rst:10
#: ../../source/socket.io/server-api/API.rst:199
#: ../../source/socket.io/server-api/API.rst:218
#: ../../source/socket.io/server-api/API.rst:366
#: ../../source/socket.io/server-api/API.rst:375
msgid "``options`` *(Object)*"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:33
msgid "``forceNew`` *(Boolean)* whether to reuse an existing connection"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:35
#: ../../source/socket.io/client-api/IO.rst:614
#: ../../source/socket.io/client-api/Manager.rst:359
#: ../../source/socket.io/client-api/Socket.rst:56
#: ../../source/socket.io/client-api/Socket.rst:87
#: ../../source/socket.io/client-api/Socket.rst:98
#: ../../source/socket.io/client-api/Socket.rst:130
#: ../../source/socket.io/client-api/Socket.rst:157
#: ../../source/socket.io/client-api/Socket.rst:180
#: ../../source/socket.io/server-api/Socket.rst:135
#: ../../source/socket.io/server-api/Socket.rst:326
msgid "**Returns** ``Socket``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:37
msgid "Creates a new ``Manager`` for the given URL, and attempts to reuse an existing ``Manager`` for subsequent calls, unless the ``multiplex`` option is passed with ``false``. Passing this option is the equivalent of passing ``'force new connection': true`` or ``forceNew: true``."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:42
msgid "A new ``Socket`` instance is returned for the namespace specified by the pathname in the URL, defaulting to ``/``. For example, if the ``url`` is ``http://localhost/users``, a transport connection will be established to ``http://localhost`` and a Socket.IO connection will be established to ``/users``."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:48
msgid "Query parameters can also be provided, either with the ``query`` option or directly in the url (example: ``http://localhost/users?token=abc``)."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:51
msgid "See `new Manager(url[, options]) <#new-Manager-url-options>`__ for the the list of available ``options``."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:55
msgid "Initialization examples"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:58
msgid "With multiplexing"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:60
msgid "By default, a single connection is used when connecting to different namespaces (to minimize resources):"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:69
msgid "That behaviour can be disabled with the ``forceNew`` option:"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:77
msgid "Note: reusing the same namespace will also create two connections"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:86
msgid "With custom ``path``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:99
msgid "The request URLs will look like: ``localhost/myownpath/?EIO=3&transport=polling&sid=<id>``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:108
msgid "Here, the socket connects to the ``admin`` namespace, with the custom path ``mypath``."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:111
msgid "The request URLs will look like: ``localhost/mypath/?EIO=3&transport=polling&sid=<id>`` (the namespace is sent as part of the payload)."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:116
msgid "With query parameters"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:141
msgid "With query option"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:151
msgid "The query content can also be updated on reconnection:"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:162
msgid "With ``extraHeaders``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:164
msgid "This only works if ``polling`` transport is enabled (which is the default). Custom headers will not be appended when using ``websocket`` as the transport. This happens because the WebSocket handshake does not honor custom headers. (For background see the `WebSocket protocol RFC <https://tools.ietf.org/html/rfc6455#section-4>`__)"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:195
msgid "With ``websocket`` transport only"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:197
msgid "By default, a long-polling connection is established first, then upgraded to “better” transports (like WebSocket). If you like to live dangerously, this part can be skipped:"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:214
msgid "With a custom parser"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:216
msgid "The default `parser <https://github.com/socketio/socket.io-parser>`__ promotes compatibility (support for ``Blob``, ``File``, binary check) at the expense of performance. A custom parser can be provided to match the needs of your application. Please see the example `here <https://github.com/socketio/socket.io/tree/master/examples/custom-parsers>`__."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:235
msgid "With a self-signed certificate"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:258
#: ../../source/socket.io/client-api/Manager.rst:3
msgid "Manager"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:261
#: ../../source/socket.io/client-api/Manager.rst:6
msgid "new Manager(url[, options])"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:263
#: ../../source/socket.io/client-api/Manager.rst:8
msgid "``url`` *(String)*"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:265
#: ../../source/socket.io/client-api/IO.rst:596
#: ../../source/socket.io/client-api/Manager.rst:10
#: ../../source/socket.io/client-api/Manager.rst:341
msgid "**Returns** ``Manager``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:267
#: ../../source/socket.io/client-api/Manager.rst:12
#: ../../source/socket.io/server-api/API.rst:21
msgid "Available options:"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:270
#: ../../source/socket.io/client-api/IO.rst:342
#: ../../source/socket.io/client-api/IO.rst:465
#: ../../source/socket.io/client-api/Manager.rst:15
#: ../../source/socket.io/client-api/Manager.rst:87
#: ../../source/socket.io/client-api/Manager.rst:210
#: ../../source/socket.io/server-api/API.rst:24
#: ../../source/socket.io/server-api/API.rst:57
msgid "Option"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:270
#: ../../source/socket.io/client-api/IO.rst:342
#: ../../source/socket.io/client-api/IO.rst:465
#: ../../source/socket.io/client-api/Manager.rst:15
#: ../../source/socket.io/client-api/Manager.rst:87
#: ../../source/socket.io/client-api/Manager.rst:210
#: ../../source/socket.io/server-api/API.rst:24
#: ../../source/socket.io/server-api/API.rst:57
msgid "Default value"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:270
#: ../../source/socket.io/client-api/IO.rst:342
#: ../../source/socket.io/client-api/IO.rst:465
#: ../../source/socket.io/client-api/Manager.rst:15
#: ../../source/socket.io/client-api/Manager.rst:87
#: ../../source/socket.io/client-api/Manager.rst:210
#: ../../source/socket.io/server-api/API.rst:24
#: ../../source/socket.io/server-api/API.rst:57
#: ../../source/socket.io/server-api/Socket.rst:399
msgid "Description"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:272
#: ../../source/socket.io/client-api/Manager.rst:17
#: ../../source/socket.io/server-api/API.rst:26
msgid "``path``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:272
#: ../../source/socket.io/client-api/Manager.rst:17
#: ../../source/socket.io/server-api/API.rst:26
msgid "``/socket.io``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:272
#: ../../source/socket.io/client-api/Manager.rst:17
msgid "name of the path that is captured on the server side"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:276
#: ../../source/socket.io/client-api/Manager.rst:21
msgid "``reconnect ion``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:276
#: ../../source/socket.io/client-api/IO.rst:313
#: ../../source/socket.io/client-api/IO.rst:344
#: ../../source/socket.io/client-api/IO.rst:353
#: ../../source/socket.io/client-api/IO.rst:513
#: ../../source/socket.io/client-api/Manager.rst:21
#: ../../source/socket.io/client-api/Manager.rst:58
#: ../../source/socket.io/client-api/Manager.rst:89
#: ../../source/socket.io/client-api/Manager.rst:98
#: ../../source/socket.io/client-api/Manager.rst:258
#: ../../source/socket.io/server-api/API.rst:29
#: ../../source/socket.io/server-api/API.rst:99
#: ../../source/socket.io/server-api/API.rst:102
#: ../../source/socket.io/server-api/API.rst:111
#: ../../source/socket.io/server-api/API.rst:139
msgid "``true``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:276
#: ../../source/socket.io/client-api/Manager.rst:21
msgid "whether to reconnect automatically"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:279
#: ../../source/socket.io/client-api/Manager.rst:24
msgid "``reconnect ionAttempts ``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:279
#: ../../source/socket.io/client-api/Manager.rst:24
msgid "``Infinity``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:279
#: ../../source/socket.io/client-api/Manager.rst:24
msgid "number of reconnection attempts before giving up"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:283
#: ../../source/socket.io/client-api/Manager.rst:28
msgid "``reconnect ionDelay``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:283
#: ../../source/socket.io/client-api/Manager.rst:28
msgid "``1000``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:283
#: ../../source/socket.io/client-api/Manager.rst:28
msgid "how long to initially wait before attempting a new reconnection (``1000``). Affected by +/- ``randomizationFactor`` , for example the default initial delay will be between 500 to 1500ms."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:294
#: ../../source/socket.io/client-api/Manager.rst:39
msgid "``reconnect ionDelayMax ``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:294
#: ../../source/socket.io/client-api/Manager.rst:39
#: ../../source/socket.io/server-api/API.rst:59
msgid "``5000``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:294
#: ../../source/socket.io/client-api/Manager.rst:39
msgid "maximum amount of time to wait between reconnections (``5000``). Each attempt increases the reconnection delay by 2x along with a randomization as above"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:303
#: ../../source/socket.io/client-api/Manager.rst:48
msgid "``randomiza tionFactor` `"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:303
#: ../../source/socket.io/client-api/Manager.rst:48
msgid "``0.5``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:303
#: ../../source/socket.io/client-api/Manager.rst:48
msgid "0 <= randomizationFactor <= 1"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:307
#: ../../source/socket.io/client-api/Manager.rst:52
msgid "``timeout``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:307
#: ../../source/socket.io/client-api/Manager.rst:52
msgid "``20000``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:307
#: ../../source/socket.io/client-api/Manager.rst:52
msgid "connection timeout before a ``connect_error`` and ``connect_timeout`` events are emitted"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:313
#: ../../source/socket.io/client-api/Manager.rst:58
msgid "``autoConne ct``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:313
#: ../../source/socket.io/client-api/Manager.rst:58
msgid "by setting this false, you have to call ``manager.open`` whenever you decide it’s appropriate"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:319
#: ../../source/socket.io/client-api/Manager.rst:64
msgid "``query``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:319
#: ../../source/socket.io/client-api/IO.rst:412
#: ../../source/socket.io/client-api/IO.rst:522
#: ../../source/socket.io/client-api/Manager.rst:64
#: ../../source/socket.io/client-api/Manager.rst:157
#: ../../source/socket.io/client-api/Manager.rst:267
msgid "``{}``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:319
#: ../../source/socket.io/client-api/Manager.rst:64
msgid "additional query parameters that are sent when connecting a namespace (then found in ``socket.handshake.quer y`` object on the server-side)"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:329
#: ../../source/socket.io/client-api/Manager.rst:74
#: ../../source/socket.io/server-api/API.rst:44
msgid "``parser``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:329
#: ../../source/socket.io/client-api/Manager.rst:74
#: ../../source/socket.io/server-api/API.rst:44
msgid "the parser to use. Defaults to an instance of the ``Parser`` that ships with socket.io. See `socket.io-parser <http s://github.com/socketio /socket.io-parser>`__."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:339
#: ../../source/socket.io/client-api/Manager.rst:84
msgid "Available options for the underlying Engine.IO client:"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:344
#: ../../source/socket.io/client-api/Manager.rst:89
msgid "``upgrade``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:344
#: ../../source/socket.io/client-api/Manager.rst:89
msgid "whether the client should try to upgrade the transport from long-polling to something better."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:350
#: ../../source/socket.io/client-api/Manager.rst:95
msgid "``forceJSON P``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:350
#: ../../source/socket.io/client-api/IO.rst:370
#: ../../source/socket.io/client-api/IO.rst:379
#: ../../source/socket.io/client-api/IO.rst:418
#: ../../source/socket.io/client-api/IO.rst:438
#: ../../source/socket.io/client-api/IO.rst:467
#: ../../source/socket.io/client-api/IO.rst:501
#: ../../source/socket.io/client-api/IO.rst:531
#: ../../source/socket.io/client-api/Manager.rst:95
#: ../../source/socket.io/client-api/Manager.rst:115
#: ../../source/socket.io/client-api/Manager.rst:124
#: ../../source/socket.io/client-api/Manager.rst:163
#: ../../source/socket.io/client-api/Manager.rst:183
#: ../../source/socket.io/client-api/Manager.rst:212
#: ../../source/socket.io/client-api/Manager.rst:246
#: ../../source/socket.io/client-api/Manager.rst:276
msgid "``false``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:350
#: ../../source/socket.io/client-api/Manager.rst:95
msgid "forces JSONP for polling transport."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:353
#: ../../source/socket.io/client-api/Manager.rst:98
msgid "``jsonp``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:353
#: ../../source/socket.io/client-api/Manager.rst:98
msgid "determines whether to use JSONP when necessary for polling. If disabled (by settings to false) an error will be emitted (saying “No transports available”) if no other transports are available. If another transport is available for opening a connection (e.g. WebSocket) that transport will be used instead."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:370
#: ../../source/socket.io/client-api/Manager.rst:115
msgid "``forceBase 64``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:370
#: ../../source/socket.io/client-api/Manager.rst:115
msgid "forces base 64 encoding for polling transport even when XHR2 responseType is available and WebSocket even if the used standard supports binary."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:379
#: ../../source/socket.io/client-api/Manager.rst:124
msgid "``enablesXD R``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:379
#: ../../source/socket.io/client-api/Manager.rst:124
msgid "enables XDomainRequest for IE8 to avoid loading bar flashing with click sound. default to ``false`` because XDomainRequest has a flaw of not sending cookie."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:388
#: ../../source/socket.io/client-api/Manager.rst:133
msgid "``timestamp Requests``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:388
#: ../../source/socket.io/client-api/Manager.rst:133
msgid "whether to add the timestamp with each transport request. Note: polling requests are always stamped unless this option is explicitly set to ``false``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:397
#: ../../source/socket.io/client-api/Manager.rst:142
msgid "``timestamp Param``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:397
#: ../../source/socket.io/client-api/Manager.rst:142
msgid "``t``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:397
#: ../../source/socket.io/client-api/Manager.rst:142
msgid "the timestamp parameter"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:400
#: ../../source/socket.io/client-api/Manager.rst:145
msgid "``policyPor t``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:400
#: ../../source/socket.io/client-api/Manager.rst:145
msgid "``843``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:400
#: ../../source/socket.io/client-api/Manager.rst:145
msgid "port the policy server listens on"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:403
#: ../../source/socket.io/client-api/Manager.rst:148
#: ../../source/socket.io/server-api/API.rst:96
msgid "``transport s``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:403
#: ../../source/socket.io/client-api/Manager.rst:148
#: ../../source/socket.io/server-api/API.rst:96
msgid "``['polling', 'websocket']``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:403
#: ../../source/socket.io/client-api/Manager.rst:148
msgid "a list of transports to try (in order). ``Engine`` always attempts to connect directly with the first one, provided the feature detection test for it passes."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:412
#: ../../source/socket.io/client-api/Manager.rst:157
msgid "``transport Options``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:412
#: ../../source/socket.io/client-api/Manager.rst:157
msgid "hash of options, indexed by transport name, overriding the common options for the given transport"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:418
#: ../../source/socket.io/client-api/Manager.rst:163
msgid "``rememberU pgrade``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:418
#: ../../source/socket.io/client-api/Manager.rst:163
msgid "If true and if the previous websocket connection to the server succeeded, the connection attempt will bypass the normal upgrade process and will initially try websocket. A connection attempt following a transport error will use the normal upgrade process. It is recommended you turn this on only when using SSL/TLS connections, or if you know that your network does not block websockets."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:438
#: ../../source/socket.io/client-api/Manager.rst:183
msgid "``onlyBinar yUpgrades``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:438
#: ../../source/socket.io/client-api/Manager.rst:183
msgid "whether transport upgrades should be restricted to transports supporting binary data"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:444
#: ../../source/socket.io/client-api/Manager.rst:189
msgid "``requestTi meout``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:444
#: ../../source/socket.io/client-api/Manager.rst:189
msgid "``0``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:444
#: ../../source/socket.io/client-api/Manager.rst:189
msgid "timeout for xhr-polling requests in milliseconds (``0``) (*only for polling transport*)"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:450
#: ../../source/socket.io/client-api/Manager.rst:195
msgid "``protocols ``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:450
#: ../../source/socket.io/client-api/Manager.rst:195
msgid "a list of subprotocols (see `MDN reference <https://deve loper.mozilla.org/en-US /docs/Web/API/WebSocket s_API/Writing_WebSocket _servers#Subprotocols>` __) (*only for websocket transport*)"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:462
#: ../../source/socket.io/client-api/Manager.rst:207
msgid "Node.js-only options for the underlying Engine.IO client:"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:467
#: ../../source/socket.io/client-api/Manager.rst:212
msgid "``agent``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:467
#: ../../source/socket.io/client-api/Manager.rst:212
msgid "the ``http.Agent`` to use"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:470
#: ../../source/socket.io/client-api/Manager.rst:215
msgid "``pfx``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:470
#: ../../source/socket.io/client-api/Manager.rst:215
msgid "Certificate, Private key and CA certificates to use for SSL."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:474
#: ../../source/socket.io/client-api/Manager.rst:219
msgid "``key``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:474
#: ../../source/socket.io/client-api/Manager.rst:219
msgid "Private key to use for SSL."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:477
#: ../../source/socket.io/client-api/Manager.rst:222
msgid "``passphras e``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:477
#: ../../source/socket.io/client-api/Manager.rst:222
msgid "A string of passphrase for the private key or pfx."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:481
#: ../../source/socket.io/client-api/Manager.rst:226
msgid "``cert``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:481
#: ../../source/socket.io/client-api/Manager.rst:226
msgid "Public x509 certificate to use."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:484
#: ../../source/socket.io/client-api/Manager.rst:229
msgid "``ca``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:484
#: ../../source/socket.io/client-api/Manager.rst:229
msgid "An authority certificate or array of authority certificates to check the remote host against."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:490
#: ../../source/socket.io/client-api/Manager.rst:235
msgid "``ciphers``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:490
#: ../../source/socket.io/client-api/Manager.rst:235
msgid "A string describing the ciphers to use or exclude. Consult the `cipher format list <http://www.openss l.org/docs/apps/ciphers .html#CIPHER_LIST_FORMA T>`__ for details on the format."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:501
#: ../../source/socket.io/client-api/Manager.rst:246
msgid "``rejectUna uthorized``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:501
#: ../../source/socket.io/client-api/Manager.rst:246
msgid "If true, the server certificate is verified against the list of supplied CAs. An ‘error’ event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:513
#: ../../source/socket.io/client-api/Manager.rst:258
#: ../../source/socket.io/server-api/API.rst:102
msgid "``perMessag eDeflate``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:513
#: ../../source/socket.io/client-api/Manager.rst:258
#: ../../source/socket.io/server-api/API.rst:102
msgid "parameters of the WebSocket permessage-deflate extension (see `ws module <https://github. com/einaros/ws>`__ api docs). Set to ``false`` to disable."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:522
#: ../../source/socket.io/client-api/Manager.rst:267
msgid "``extraHead ers``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:522
#: ../../source/socket.io/client-api/Manager.rst:267
msgid "Headers that will be passed for each request to the server (via xhr-polling and via websockets). These values then can be used during handshake or for special proxies."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:531
#: ../../source/socket.io/client-api/Manager.rst:276
msgid "``forceNode ``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:531
#: ../../source/socket.io/client-api/Manager.rst:276
msgid "Uses NodeJS implementation for websockets - even if there is a native Browser-Websocket available, which is preferred by default over the NodeJS implementation. (This is useful when using hybrid platforms like nw.js or electron)"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:544
#: ../../source/socket.io/client-api/Manager.rst:289
msgid "``localAddr ess``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:544
#: ../../source/socket.io/client-api/Manager.rst:289
msgid "the local IP address to connect to"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:549
#: ../../source/socket.io/client-api/Manager.rst:294
msgid "manager.reconnection([value])"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:551
#: ../../source/socket.io/client-api/Manager.rst:296
#: ../../source/socket.io/client-api/Socket.rst:156
#: ../../source/socket.io/server-api/API.rst:264
msgid "``value`` *(Boolean)*"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:552
#: ../../source/socket.io/client-api/Manager.rst:297
msgid "**Returns** ``Manager|Boolean``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:554
#: ../../source/socket.io/client-api/Manager.rst:299
msgid "Sets the ``reconnection`` option, or returns it if no parameters are passed."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:558
#: ../../source/socket.io/client-api/Manager.rst:303
msgid "manager.reconnectionAttempts([value])"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:560
#: ../../source/socket.io/client-api/IO.rst:569
#: ../../source/socket.io/client-api/IO.rst:578
#: ../../source/socket.io/client-api/IO.rst:587
#: ../../source/socket.io/client-api/Manager.rst:305
#: ../../source/socket.io/client-api/Manager.rst:314
#: ../../source/socket.io/client-api/Manager.rst:323
#: ../../source/socket.io/client-api/Manager.rst:332
msgid "``value`` *(Number)*"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:561
#: ../../source/socket.io/client-api/IO.rst:570
#: ../../source/socket.io/client-api/IO.rst:579
#: ../../source/socket.io/client-api/IO.rst:588
#: ../../source/socket.io/client-api/Manager.rst:306
#: ../../source/socket.io/client-api/Manager.rst:315
#: ../../source/socket.io/client-api/Manager.rst:324
#: ../../source/socket.io/client-api/Manager.rst:333
msgid "**Returns** ``Manager|Number``"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:563
#: ../../source/socket.io/client-api/Manager.rst:308
msgid "Sets the ``reconnectionAttempts`` option, or returns it if no parameters are passed."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:567
#: ../../source/socket.io/client-api/Manager.rst:312
msgid "manager.reconnectionDelay([value])"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:572
#: ../../source/socket.io/client-api/Manager.rst:317
msgid "Sets the ``reconnectionDelay`` option, or returns it if no parameters are passed."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:576
#: ../../source/socket.io/client-api/Manager.rst:321
msgid "manager.reconnectionDelayMax([value])"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:581
#: ../../source/socket.io/client-api/Manager.rst:326
msgid "Sets the ``reconnectionDelayMax`` option, or returns it if no parameters are passed."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:585
#: ../../source/socket.io/client-api/Manager.rst:330
msgid "manager.timeout([value])"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:590
#: ../../source/socket.io/client-api/Manager.rst:335
msgid "Sets the ``timeout`` option, or returns it if no parameters are passed."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:593
#: ../../source/socket.io/client-api/Manager.rst:338
msgid "manager.open([callback])"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:595
#: ../../source/socket.io/client-api/Manager.rst:340
#: ../../source/socket.io/client-api/Socket.rst:129
#: ../../source/socket.io/server-api/API.rst:456
#: ../../source/socket.io/server-api/Namespace.rst:88
#: ../../source/socket.io/server-api/Socket.rst:215
#: ../../source/socket.io/server-api/Socket.rst:252
#: ../../source/socket.io/server-api/Socket.rst:262
msgid "``callback`` *(Function)*"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:598
#: ../../source/socket.io/client-api/Manager.rst:343
msgid "If the manager was initiated with ``autoConnect`` to ``false``, launch a new connection attempt."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:601
#: ../../source/socket.io/client-api/Manager.rst:346
msgid "The ``callback`` argument is optional and will be called once the attempt fails/succeeds."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:605
#: ../../source/socket.io/client-api/Manager.rst:350
msgid "manager.connect([callback])"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:607
#: ../../source/socket.io/client-api/Manager.rst:352
msgid "Synonym of `manager.open([callback]) <#manageropencallback>`__."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:610
#: ../../source/socket.io/client-api/Manager.rst:355
msgid "manager.socket(nsp, options)"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:612
#: ../../source/socket.io/client-api/Manager.rst:357
msgid "``nsp`` *(String)*"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:616
#: ../../source/socket.io/client-api/Manager.rst:361
msgid "Creates a new ``Socket`` for the given namespace."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:619
#: ../../source/socket.io/client-api/Manager.rst:364
#: ../../source/socket.io/client-api/Socket.rst:209
msgid "Event: ‘connect_error’"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:621
#: ../../source/socket.io/client-api/IO.rst:654
#: ../../source/socket.io/client-api/Manager.rst:366
#: ../../source/socket.io/client-api/Manager.rst:399
#: ../../source/socket.io/client-api/Socket.rst:211
#: ../../source/socket.io/client-api/Socket.rst:237
#: ../../source/socket.io/client-api/Socket.rst:315
#: ../../source/socket.io/server-api/Socket.rst:423
msgid "``error`` *(Object)* error object"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:623
#: ../../source/socket.io/client-api/Manager.rst:368
#: ../../source/socket.io/client-api/Socket.rst:213
msgid "Fired upon a connection error."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:626
#: ../../source/socket.io/client-api/Manager.rst:371
#: ../../source/socket.io/client-api/Socket.rst:224
msgid "Event: ‘connect_timeout’"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:628
#: ../../source/socket.io/client-api/Manager.rst:373
#: ../../source/socket.io/client-api/Socket.rst:226
msgid "Fired upon a connection timeout."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:631
#: ../../source/socket.io/client-api/Manager.rst:376
#: ../../source/socket.io/client-api/Socket.rst:268
msgid "Event: ‘reconnect’"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:633
#: ../../source/socket.io/client-api/IO.rst:640
#: ../../source/socket.io/client-api/IO.rst:647
#: ../../source/socket.io/client-api/Manager.rst:378
#: ../../source/socket.io/client-api/Manager.rst:385
#: ../../source/socket.io/client-api/Manager.rst:392
#: ../../source/socket.io/client-api/Socket.rst:270
#: ../../source/socket.io/client-api/Socket.rst:285
#: ../../source/socket.io/client-api/Socket.rst:300
msgid "``attempt`` *(Number)* reconnection attempt number"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:635
#: ../../source/socket.io/client-api/Manager.rst:380
#: ../../source/socket.io/client-api/Socket.rst:272
msgid "Fired upon a successful reconnection."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:638
#: ../../source/socket.io/client-api/Manager.rst:383
#: ../../source/socket.io/client-api/Socket.rst:283
msgid "Event: ‘reconnect_attempt’"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:642
#: ../../source/socket.io/client-api/IO.rst:649
#: ../../source/socket.io/client-api/Manager.rst:387
#: ../../source/socket.io/client-api/Manager.rst:394
#: ../../source/socket.io/client-api/Socket.rst:287
#: ../../source/socket.io/client-api/Socket.rst:302
msgid "Fired upon an attempt to reconnect."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:645
#: ../../source/socket.io/client-api/Manager.rst:390
#: ../../source/socket.io/client-api/Socket.rst:298
msgid "Event: ‘reconnecting’"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:652
#: ../../source/socket.io/client-api/Manager.rst:397
#: ../../source/socket.io/client-api/Socket.rst:313
msgid "Event: ‘reconnect_error’"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:656
#: ../../source/socket.io/client-api/Manager.rst:401
#: ../../source/socket.io/client-api/Socket.rst:317
msgid "Fired upon a reconnection attempt error."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:659
#: ../../source/socket.io/client-api/Manager.rst:404
#: ../../source/socket.io/client-api/Socket.rst:328
msgid "Event: ‘reconnect_failed’"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:661
#: ../../source/socket.io/client-api/Manager.rst:406
#: ../../source/socket.io/client-api/Socket.rst:330
msgid "Fired when couldn’t reconnect within ``reconnectionAttempts``."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:664
#: ../../source/socket.io/client-api/Manager.rst:409
#: ../../source/socket.io/client-api/Socket.rst:341
msgid "Event: ‘ping’"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:666
#: ../../source/socket.io/client-api/Manager.rst:411
#: ../../source/socket.io/client-api/Socket.rst:343
msgid "Fired when a ping packet is written out to the server."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:669
#: ../../source/socket.io/client-api/Manager.rst:414
#: ../../source/socket.io/client-api/Socket.rst:354
msgid "Event: ‘pong’"
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:671
#: ../../source/socket.io/client-api/Manager.rst:416
#: ../../source/socket.io/client-api/Socket.rst:356
msgid "``ms`` *(Number)* number of ms elapsed since ``ping`` packet (i.e.: latency)."
msgstr ""

#: ../../source/socket.io/client-api/IO.rst:674
#: ../../source/socket.io/client-api/Manager.rst:419
#: ../../source/socket.io/client-api/Socket.rst:359
msgid "Fired when a pong is received from the server."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:3
#: ../../source/socket.io/server-api/Socket.rst:3
msgid "Socket"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:6
#: ../../source/socket.io/server-api/Socket.rst:26
msgid "socket.id"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:8
#: ../../source/socket.io/server-api/Namespace.rst:17
#: ../../source/socket.io/server-api/Socket.rst:28
msgid "*(String)*"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:10
msgid "An unique identifier for the socket session. Set after the ``connect`` event is triggered, and updated after the ``reconnect`` event."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:24
msgid "socket.connected"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:26
#: ../../source/socket.io/client-api/Socket.rst:41
msgid "*(Boolean)*"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:28
msgid "Whether or not the socket is connected to the server."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:39
msgid "socket.disconnected"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:43
msgid "Whether or not the socket is disconnected from the server."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:54
msgid "socket.open()"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:58
msgid "Manually opens the socket."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:69
msgid "It can also be used to manually reconnect:"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:78
msgid "socket.connect()"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:80
msgid "Synonym of `socket.open() <#socketopen>`__."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:83
#: ../../source/socket.io/server-api/Socket.rst:131
msgid "socket.send([…args][, ack])"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:85
#: ../../source/socket.io/client-api/Socket.rst:96
#: ../../source/socket.io/server-api/Namespace.rst:69
#: ../../source/socket.io/server-api/Socket.rst:133
msgid "``args``"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:86
#: ../../source/socket.io/client-api/Socket.rst:97
#: ../../source/socket.io/server-api/Socket.rst:134
msgid "``ack`` *(Function)*"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:89
#: ../../source/socket.io/server-api/Socket.rst:137
msgid "Sends a ``message`` event. See `socket.emit(eventName[, …args][, ack]) <#socketemiteventname-args-ack>`__."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:93
#: ../../source/socket.io/server-api/Socket.rst:141
msgid "socket.emit(eventName[, …args][, ack])"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:95
#: ../../source/socket.io/client-api/Socket.rst:128
#: ../../source/socket.io/server-api/Namespace.rst:68
msgid "``eventName`` *(String)*"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:100
#: ../../source/socket.io/server-api/Socket.rst:146
msgid "Emits an event to the socket identified by the string name. Any other parameters can be included. All serializable datastructures are supported, including ``Buffer``."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:109
msgid "The ``ack`` argument is optional and will be called with the server answer."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:126
#: ../../source/socket.io/server-api/Socket.rst:175
msgid "socket.on(eventName, callback)"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:132
#: ../../source/socket.io/server-api/Socket.rst:180
msgid "Register a new handler for the given event."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:149
msgid "The socket actually inherits every method of the `Emitter <https://github.com/component/emitter>`__ class, like ``hasListeners``, ``once`` or ``off`` (to remove an event listener)."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:154
#: ../../source/socket.io/server-api/Socket.rst:307
msgid "socket.compress(value)"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:159
#: ../../source/socket.io/server-api/Socket.rst:312
msgid "Sets a modifier for a subsequent event emission that the event data will only be *compressed* if the value is ``true``. Defaults to ``true`` when you don’t call the method."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:168
msgid "socket.binary(value)"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:170
msgid "Specifies whether the emitted data contains binary. Increases performance when specified. Can be ``true`` or ``false``."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:178
msgid "socket.close()"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:182
msgid "Disconnects the socket manually."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:185
msgid "socket.disconnect()"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:187
msgid "Synonym of `socket.close() <#socketclose>`__."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:190
#: ../../source/socket.io/server-api/Namespace.rst:141
msgid "Event: ‘connect’"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:192
msgid "Fired upon a connection including a successful reconnection."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:235
#: ../../source/socket.io/server-api/Socket.rst:421
msgid "Event: ‘error’"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:239
#: ../../source/socket.io/server-api/Socket.rst:425
msgid "Fired when an error occurs."
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:248
#: ../../source/socket.io/server-api/Socket.rst:381
msgid "Event: ‘disconnect’"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:250
msgid "``reason`` *(String)* either ‘io server disconnect’, ‘io client disconnect’, or ‘ping timeout’"
msgstr ""

#: ../../source/socket.io/client-api/Socket.rst:253
msgid "Fired upon a disconnection."
msgstr ""

#: ../../source/socket.io/client-api/index.rst:2
msgid "Client API"
msgstr ""

#: ../../source/socket.io/demos/chat.rst:2
msgid "Chat demos"
msgstr ""

#: ../../source/socket.io/demos/chat.rst:8
msgid "https://socket-io-chat.now.sh/View source code"
msgstr ""

#: ../../source/socket.io/demos/index.rst:2
msgid "Demos"
msgstr ""

#: ../../source/socket.io/demos/whiteboard.rst:2
msgid "Whiteboard demos"
msgstr ""

#: ../../source/socket.io/demos/whiteboard.rst:8
msgid "https://socket-io-whiteboard.now.sh/View source code"
msgstr ""

#: ../../source/socket.io/docs/emit-cheatsheet.rst:2
msgid "Emit cheatsheet"
msgstr ""

#: ../../source/socket.io/docs/emit-cheatsheet.rst:58
msgid "**Note:** The following events are reserved and should not be used as event names by your application: - ``error`` - ``connect`` - ``disconnect`` - ``disconnecting`` - ``newListener`` - ``removeListener`` - ``ping`` - ``pong``"
msgstr ""

#: ../../source/socket.io/docs/faq.rst:2
msgid "FAQ"
msgstr ""

#: ../../source/socket.io/docs/faq.rst:5
msgid "Can I use wildcards in events?"
msgstr ""

#: ../../source/socket.io/docs/faq.rst:7
msgid "Not in Socket.IO directly, but check out `this plugin <https://github.com/hden/socketio-wildcard>`__ by Hao-kang Den. It provides a Socket.IO middleware to deal with wildcards."
msgstr ""

#: ../../source/socket.io/docs/faq.rst:12
msgid "Socket.IO with Apache Cordova?"
msgstr ""

#: ../../source/socket.io/docs/faq.rst:14
msgid "Take a look at `this tutorial </socket-io-with-apache-cordova/>`__."
msgstr ""

#: ../../source/socket.io/docs/faq.rst:17
msgid "Socket.IO on iOS?"
msgstr ""

#: ../../source/socket.io/docs/faq.rst:19
msgid "Take a look at `SIOSocket <https://github.com/MegaBits/SIOSocket>`__."
msgstr ""

#: ../../source/socket.io/docs/faq.rst:22
msgid "Socket.IO on Android?"
msgstr ""

#: ../../source/socket.io/docs/faq.rst:24
msgid "Take a look at `socket.io-client.java <https://github.com/nkzawa/socket.io-client.java>`__."
msgstr ""

#: ../../source/socket.io/docs/index.rst:2
#: ../../source/socket.io/docs/info.rst:2
msgid "Docs"
msgstr ""

#: ../../source/socket.io/docs/info.rst:5
msgid "What Socket.IO is"
msgstr ""

#: ../../source/socket.io/docs/info.rst:7
msgid "Socket.IO is a library that enables real-time, bidirectional and event-based communication between the browser and the server. It consists of:"
msgstr ""

#: ../../source/socket.io/docs/info.rst:11
msgid "a Node.js server: `Source <https://github.com/socketio/socket.io>`__ \\| `API </docs/server-api/>`__"
msgstr ""

#: ../../source/socket.io/docs/info.rst:13
msgid "a Javascript client library for the browser (which can be also run from Node.js): `Source <https://github.com/socketio/socket.io-client>`__ \\| `API </docs/client-api/>`__"
msgstr ""

#: ../../source/socket.io/docs/info.rst:18
msgid "Its main features are:"
msgstr ""

#: ../../source/socket.io/docs/info.rst:21
msgid "Reliability"
msgstr ""

#: ../../source/socket.io/docs/info.rst:23
msgid "Connections are established even in the presence of:"
msgstr ""

#: ../../source/socket.io/docs/info.rst:25
msgid "proxies and load balancers."
msgstr ""

#: ../../source/socket.io/docs/info.rst:26
msgid "personal firewall and antivirus software."
msgstr ""

#: ../../source/socket.io/docs/info.rst:28
msgid "For this purpose, it relies on `Engine.IO <https://github.com/socketio/engine.io>`__, which first establishes a long-polling connection, then tries to upgrade to better transports that are “tested” on the side, like WebSocket. Please see the `Goals <https://github.com/socketio/engine.io#goals>`__ section for more information."
msgstr ""

#: ../../source/socket.io/docs/info.rst:36
msgid "Auto-reconnection support"
msgstr ""

#: ../../source/socket.io/docs/info.rst:38
msgid "Unless instructed otherwise a disconnected client will try to reconnect forever, until the server is available again. Please see the available reconnection options `here <https://socket.io/docs/client-api/#new-Manager-url-options>`__."
msgstr ""

#: ../../source/socket.io/docs/info.rst:44
msgid "Disconnection detection"
msgstr ""

#: ../../source/socket.io/docs/info.rst:46
msgid "A heartbeat mechanism is implemented at the Engine.IO level, allowing both the server and the client to know when the other one is not responding anymore."
msgstr ""

#: ../../source/socket.io/docs/info.rst:50
msgid "That functionality is achieved with timers set on both the server and the client, with timeout values (the pingInterval and pingTimeout parameters) shared during the connection handshake. Those timers require any subsequent client calls to be directed to the same server, hence the sticky-session requirement when using multiples nodes."
msgstr ""

#: ../../source/socket.io/docs/info.rst:59
msgid "Any serializable data structures can be emitted, including:"
msgstr ""

#: ../../source/socket.io/docs/info.rst:61
msgid "`ArrayBuffer <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer>`__ and `Blob <https://developer.mozilla.org/en-US/docs/Web/API/Blob>`__ in the browser"
msgstr ""

#: ../../source/socket.io/docs/info.rst:64
msgid "`ArrayBuffer <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer>`__ and `Buffer <https://nodejs.org/api/buffer.html>`__ in Node.js"
msgstr ""

#: ../../source/socket.io/docs/info.rst:68
msgid "Multiplexing support"
msgstr ""

#: ../../source/socket.io/docs/info.rst:70
msgid "In order to create separation of concerns within your application (for example per module, or based on permissions), Socket.IO allows you to create several `Namespaces </docs/rooms-and-namespaces/#Namespaces>`__, which will act as separate communication channels but will share the same underlying connection."
msgstr ""

#: ../../source/socket.io/docs/info.rst:77
msgid "Room support"
msgstr ""

#: ../../source/socket.io/docs/info.rst:79
msgid "Within each `Namespace </docs/rooms-and-namespaces/#Namespaces>`__, you can define arbitrary channels, called `Rooms </docs/rooms-and-namespaces/#Rooms>`__, that sockets can join and leave. You can then broadcast to any given room, reaching every socket that has joined it."
msgstr ""

#: ../../source/socket.io/docs/info.rst:85
msgid "This is a useful feature to send notifications to a group of users, or to a given user connected on several devices for example."
msgstr ""

#: ../../source/socket.io/docs/info.rst:88
msgid "Those features come with a simple and convenient API, which looks like the following:"
msgstr ""

#: ../../source/socket.io/docs/info.rst:100
msgid "What Socket.IO is not"
msgstr ""

#: ../../source/socket.io/docs/info.rst:102
msgid "Socket.IO is **NOT** a WebSocket implementation. Although Socket.IO indeed uses WebSocket as a transport when possible, it adds some metadata to each packet: the packet type, the namespace and the ack id when a message acknowledgement is needed. That is why a WebSocket client will not be able to successfully connect to a Socket.IO server, and a Socket.IO client will not be able to connect to a WebSocket server either. Please see the protocol specification `here <https://github.com/socketio/socket.io-protocol>`__."
msgstr ""

#: ../../source/socket.io/docs/info.rst:117
msgid "Installing"
msgstr ""

#: ../../source/socket.io/docs/info.rst:120
#: ../../source/socket.io/docs/info.rst:261
#: ../../source/socket.io/docs/info.rst:418
msgid "Server"
msgstr ""

#: ../../source/socket.io/docs/info.rst:126
msgid "`Source <https://github.com/socketio/socket.io>`__"
msgstr ""

#: ../../source/socket.io/docs/info.rst:129
msgid "Javascript Client"
msgstr ""

#: ../../source/socket.io/docs/info.rst:131
msgid "A standalone build of the client is exposed by default by the server at ``/socket.io/socket.io.js``."
msgstr ""

#: ../../source/socket.io/docs/info.rst:134
msgid "It can also be served from a CDN, like `cdnjs <https://cdnjs.com/libraries/socket.io>`__."
msgstr ""

#: ../../source/socket.io/docs/info.rst:137
msgid "To use it from Node.js, or with a bundler like `webpack <https://webpack.js.org/>`__ or `browserify <http://browserify.org/>`__, you can also install the package from npm:"
msgstr ""

#: ../../source/socket.io/docs/info.rst:146
msgid "`Source <https://github.com/socketio/socket.io-client>`__"
msgstr ""

#: ../../source/socket.io/docs/info.rst:149
msgid "Other client implementations"
msgstr ""

#: ../../source/socket.io/docs/info.rst:151
msgid "There are several client implementations in other languages, which are maintained by the community:"
msgstr ""

#: ../../source/socket.io/docs/info.rst:154
msgid "Java: https://github.com/socketio/socket.io-client-java"
msgstr ""

#: ../../source/socket.io/docs/info.rst:155
msgid "C++: https://github.com/socketio/socket.io-client-cpp"
msgstr ""

#: ../../source/socket.io/docs/info.rst:156
msgid "Swift: https://github.com/socketio/socket.io-client-swift"
msgstr ""

#: ../../source/socket.io/docs/info.rst:157
msgid "Dart: https://github.com/rikulo/socket.io-client-dart"
msgstr ""

#: ../../source/socket.io/docs/info.rst:158
msgid "Python: https://github.com/miguelgrinberg/python-socketio"
msgstr ""

#: ../../source/socket.io/docs/info.rst:159
msgid ".Net: https://github.com/Quobject/SocketIoClientDotNet"
msgstr ""

#: ../../source/socket.io/docs/info.rst:162
msgid "Using with Node http server"
msgstr ""

#: ../../source/socket.io/docs/info.rst:165
#: ../../source/socket.io/docs/info.rst:214
#: ../../source/socket.io/docs/info.rst:294
#: ../../source/socket.io/docs/info.rst:380
#: ../../source/socket.io/docs/info.rst:437
msgid "Server (app.js)"
msgstr ""

#: ../../source/socket.io/docs/info.rst:196
#: ../../source/socket.io/docs/info.rst:239
#: ../../source/socket.io/docs/info.rst:395
#: ../../source/socket.io/docs/info.rst:451
msgid "Client (index.html)"
msgstr ""

#: ../../source/socket.io/docs/info.rst:209
msgid "## Using with Express"
msgstr ""

#: ../../source/socket.io/docs/info.rst:253
msgid "Sending and receiving events"
msgstr ""

#: ../../source/socket.io/docs/info.rst:255
msgid "Socket.IO allows you to emit and receive custom events. Besides ``connect``, ``message`` and ``disconnect``, you can emit custom events:"
msgstr ""

#: ../../source/socket.io/docs/info.rst:281
msgid "Restricting yourself to a namespace"
msgstr ""

#: ../../source/socket.io/docs/info.rst:283
msgid "If you have control over all the messages and events emitted for a particular application, using the default / namespace works. If you want to leverage 3rd-party code, or produce code to share with others, socket.io provides a way of namespacing a socket."
msgstr ""

#: ../../source/socket.io/docs/info.rst:288
msgid "This has the benefit of ``multiplexing`` a single connection. Instead of socket.io using two ``WebSocket`` connections, it’ll use one."
msgstr ""

#: ../../source/socket.io/docs/info.rst:318
msgid "### Client (index.html)"
msgstr ""

#: ../../source/socket.io/docs/info.rst:336
msgid "Sending volatile messages"
msgstr ""

#: ../../source/socket.io/docs/info.rst:338
msgid "Sometimes certain messages can be dropped. Let’s say you have an app that shows realtime tweets for the keyword ``bieber``."
msgstr ""

#: ../../source/socket.io/docs/info.rst:341
msgid "If a certain client is not ready to receive messages (because of network slowness or other issues, or because they’re connected through long polling and is in the middle of a request-response cycle), if it doesn’t receive ALL the tweets related to bieber your application won’t suffer."
msgstr ""

#: ../../source/socket.io/docs/info.rst:346
msgid "In that case, you might want to send those messages as volatile messages."
msgstr ""

#: ../../source/socket.io/docs/info.rst:349
msgid "### Server"
msgstr ""

#: ../../source/socket.io/docs/info.rst:368
msgid "Sending and getting data (acknowledgements)"
msgstr ""

#: ../../source/socket.io/docs/info.rst:370
msgid "Sometimes, you might want to get a callback when the client confirmed the message reception."
msgstr ""

#: ../../source/socket.io/docs/info.rst:373
msgid "To do this, simply pass a function as the last parameter of ``.send`` or ``.emit``. What’s more, when you use ``.emit``, the acknowledgement is done by you, which means you can also pass data along:"
msgstr ""

#: ../../source/socket.io/docs/info.rst:409
msgid "Broadcasting messages"
msgstr ""

#: ../../source/socket.io/docs/info.rst:411
msgid "To broadcast, simply add a ``broadcast`` flag to ``emit`` and ``send`` method calls. Broadcasting means sending a message to everyone else except for the socket that starts it."
msgstr ""

#: ../../source/socket.io/docs/info.rst:429
msgid "Using it just as a cross-browser WebSocket"
msgstr ""

#: ../../source/socket.io/docs/info.rst:431
msgid "If you just want the WebSocket semantics, you can do that too. Simply leverage ``send`` and listen on the ``message`` event:"
msgstr ""

#: ../../source/socket.io/docs/info.rst:466
msgid "If you don’t care about reconnection logic and such, take a look at Engine.IO, which is the WebSocket semantics transport layer Socket.IO uses."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:1
msgid "title: Socket.IO — Internals permalink: /docs/internals/ type: docs —"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:4
msgid "Dependency graph"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:6
msgid "The Socket.IO codebase is split accross several repositories:"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:8
msgid "https://github.com/socketio/socket.io"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:9
msgid "https://github.com/socketio/socket.io-client"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:10
msgid "https://github.com/socketio/socket.io-parser"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:11
msgid "https://github.com/socketio/socket.io-adapter"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:12
msgid "https://github.com/socketio/socket.io-redis"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:13
msgid "https://github.com/socketio/engine.io"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:14
msgid "https://github.com/socketio/engine.io-client"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:15
msgid "https://github.com/socketio/engine.io-parser"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:17
msgid "The following diagram displays the relationships between each project:"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:19
msgid "Each project brings its own set of features:"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:22
msgid "engine.io-parser"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:24
msgid "This is the JavaScript parser for the engine.io protocol encoding, shared by both `engine.io-client <https://github.com/socketio/engine.io-client>`__ and `engine.io <https://github.com/socketio/engine.io>`__."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:29
msgid "The specification for the protocol can be found here: https://github.com/socketio/engine.io-protocol"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:33
msgid "engine.io"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:35
msgid "Engine.IO is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for Socket.IO."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:39
msgid "Its main feature is the ability to swap transports on the fly. A connection (initiated by an `engine.io-client <https://github.com/socketio/engine.io-client>`__ counterpart) starts with XHR polling, but can then switch to WebSocket if possible."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:45
#: ../../source/socket.io/docs/internals.rst:61
msgid "It uses the `engine.io-parser <https://github.com/socketio/engine.io-parser>`__ to encode/decode packets."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:49
msgid "## engine.io-client"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:51
msgid "This is the client for `Engine.IO <https://github.com/socketio/engine.io>`__, the implementation of transport-based cross-browser/cross-device bi-directional communication layer for `Socket.IO <https://github.com/socketio/socket.io>`__."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:57
msgid "It runs in both the browser (including HTML5 `WebWorker <https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API>`__) and Node.js."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:66
msgid "socket.io-adapter"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:68
msgid "This is the default Socket.IO in-memory adapter class."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:70
msgid "This module is not intended for end-user usage, but can be used as an interface to inherit from from other adapters you might want to build, like `socket.io-redis <https://github.com/socketio/socket.io-redis>`__."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:75
msgid "socket.io-redis"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:77
msgid "This is the adapter using the Redis `Pub/Sub <https://redis.io/topics/pubsub>`__ mechanism to broadcast messages between multiple nodes."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:82
msgid "socket.io-parser"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:84
msgid "A socket.io encoder and decoder written in JavaScript complying with version 3 of `socket.io-protocol <>`__. Used by `socket.io <https://github.com/socketio/socket.io>`__ and `socket.io-client <https://github.com/socketio/socket.io-client>`__."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:89
msgid "## socket.io"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:91
msgid "Socket.IO brings some *syntactic sugar* over the Engine.IO “raw” API. It also brings two new concepts, ``Rooms`` and ``Namespaces``, which introduce a separation of concern between communication channels. Please see the associated documentation `there <https://socket.io/docs/rooms-and-namespaces/>`__."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:97
msgid "By default, it exposes a browser build of the client at ``/socket.io/socket.io.js``."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:100
#: ../../source/socket.io/docs/internals.rst:115
msgid "It uses the `socket.io-parser <https://github.com/socketio/socket.io-parser>`__ to encode/decode packets."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:105
msgid "socket.io-client"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:107
msgid "This is the client for `Socket.IO <https://github.com/socketio/socket.io>`__. It relies on `engine.io-client <https://github.com/socketio/engine.io-client>`__, which manages the transport swapping and the disconnection detection."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:112
msgid "It handles reconnection automatically, in case the underlying connection is severed."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:120
msgid "Under the hood"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:122
msgid "## Connection"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:128
msgid "The following steps take place:"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:130
msgid "on the client-side, a new ``engine.io-client`` instance is created"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:132
msgid "the ``engine.io-client`` instance tries to establish a ``polling`` transport"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:145
msgid "the ``engine.io`` server responds with:"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:159
msgid "the content is encoded by the ``engine.io-parser`` as:"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:176
msgid "the content is then decoded by the ``engine.io-parser`` on the client-side"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:179
msgid "an ``open`` event is emitted at the ``engine.io-client`` level"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:181
msgid "a ``connect`` event is emitted at the ``socket.io-client`` level"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:184
msgid "Upgrade"
msgstr ""

#: ../../source/socket.io/docs/internals.rst:186
msgid "Once all the buffers of the existing transport (XHR polling) are flushed, an upgrade gets tested on the side by sending a probe."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:199
msgid "a “ping” packet is sent by the client in a WebSocket frame, encoded as ``2probe`` by the ``engine.io-parser``, with ``2`` being the “ping” message type."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:203
msgid "the server responds with a “pong” packet, encoded as ``3probe``, with ``3`` being the “pong” message type."
msgstr ""

#: ../../source/socket.io/docs/internals.rst:206
msgid "upon receiving the “pong” packet, the upgrade is considered complete and all following messages go through the new transport."
msgstr ""

#: ../../source/socket.io/docs/logging-and-debugging.rst:2
msgid "Logging and debugging"
msgstr ""

#: ../../source/socket.io/docs/logging-and-debugging.rst:4
msgid "Socket.IO is now completely instrumented by a minimalistic yet tremendously powerful utility called `debug <https://github.com/visionmedia/debug>`__ by TJ Holowaychuk."
msgstr ""

#: ../../source/socket.io/docs/logging-and-debugging.rst:8
msgid "Before 1.0, the Socket.IO server would default to logging everything out to the console. This turned out to be annoyingly verbose for many users (although extremely useful for others), so now we default to being completely silent by default."
msgstr ""

#: ../../source/socket.io/docs/logging-and-debugging.rst:34
msgid "Available debugging scopes"
msgstr ""

#: ../../source/socket.io/docs/logging-and-debugging.rst:36
msgid "The best way to see what information is available is to use the ``*``:"
msgstr ""

#: ../../source/socket.io/docs/logging-and-debugging.rst:42
msgid "or in the browser:"
msgstr ""

#: ../../source/socket.io/docs/logging-and-debugging.rst:48
msgid "And then filter by the scopes you’re interested in. You can prefix the ``*`` with scopes, separated by comma if there is more than one. For example, to only see debug statements from the socket.io client on Node.js try this:"
msgstr ""

#: ../../source/socket.io/docs/logging-and-debugging.rst:57
msgid "To see all debug messages from the engine *and* socket.io:"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:2
msgid "Migrating from 0.9"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:4
msgid "For most applications, the transition to 1.0 should be completely seamless and devoid of any hiccups. That said, we’ve done some work to streamline some APIs, and we have changed some internals, so this is a recommended read for most existing users."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:10
msgid "Authentication differences"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:13
msgid "Socket.io uses middleware now"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:15
msgid "You can give a Socket.io server arbitrary functions via ``io.use()`` that are run when a socket is created. Check out this example:"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:37
msgid "… so its cleaner to do auth via middleware now"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:39
msgid "The old ``io.set()`` and ``io.get()`` methods are deprecated and only supported for backwards compatibility. Here is a translation of an old authorization example into middleware-style."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:50
#: ../../source/socket.io/docs/migrating-from-0-9.rst:197
#: ../../source/socket.io/docs/migrating-from-0-9.rst:220
msgid "vs."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:64
msgid "Namespace authorization?"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:66
msgid "\\`\\ ``js io.of('/namespace').use(function(socket, next) {   var handshakeData = socket.request;   next(); });``"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:69
msgid "Log differences"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:72
msgid "Logging is now based on debug"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:74
msgid "To print all debug logging, set the environment variable DEBUG to \\*. ie: ``DEBUG=* node index.js``"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:77
msgid "To print only socket.io related logging: ``DEBUG=socket.io:* node index.js``."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:80
msgid "To print logging only from the socket object: ``DEBUG=socket.io:socket node index.js``."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:83
msgid "This pattern should hopefully be making sense at this point. The names of the files in socket.io/lib are equivalent to their debug names."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:86
msgid "Debug also works in the browser; logs are persisted to localstorage."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:88
msgid "To use: open the developer console and type ``localStorage.debug = 'socket.io:*'`` (or any debug level) and then refresh the page. Everything is logged until you run ``localStorage.debug = ''``"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:93
msgid "See more at the debug documentation `here <https://www.npmjs.org/package/debug>`__."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:97
msgid "Shortcuts"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:99
msgid "In general there are some new shortcuts for common things. The old versions should still work, but shortcuts are nice."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:103
msgid "Broadcasting to all clients in default namespace"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:105
#: ../../source/socket.io/docs/migrating-from-0-9.rst:124
msgid "Previously:"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:111
#: ../../source/socket.io/docs/migrating-from-0-9.rst:131
msgid "Now:"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:117
msgid "Neat. Note that in both cases, these messages reach all clients connected to the default ‘/’ namespace, but not clients in other namespaces."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:122
msgid "Starting the server"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:139
msgid "Configuration differences"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:142
msgid "io.set is gone"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:144
msgid "Instead do configuration in server initialization like this:"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:152
msgid "Options like log-level are gone. ``io.set('transports')``, ``io.set('heartbeat interval')``, ``io.set('heartbeat timeout'``, and ``io.set('resource')`` are still supported for backwards compatibility."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:157
msgid "Setting resource path"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:159
msgid "The previous ``resource`` option is equivalent to the new ``path`` option, but needs a ``/`` in the beginning. For example, the following configuration:"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:169
msgid "becomes:"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:178
msgid "Parser / Protocol differences"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:180
msgid "This is only relevant for updating things like socket.io implementations in other languages, custom socket.io clients, etc."
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:184
msgid "Difference 1 – packet encoding"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:186
msgid "Parsing is now class based and asynchronous. Instead of returning a single encoded string, encode calls callback with an array of encodings as the only argument. Each encoding should be written to the transport in order. This is more flexible and makes binary data transport work. Here’s an example:"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:209
msgid "Difference 2 – packet decoding"
msgstr ""

#: ../../source/socket.io/docs/migrating-from-0-9.rst:211
msgid "Decoding takes things a step further and is event-based. This is done because some objects (binary-containing) are both encoded and decoded in multiple parts. This example should help:"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:2
msgid "Rooms and namespaces"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:4
msgid "Socket.IO allows you to “namespace” your sockets, which essentially means assigning different *endpoints* or *paths*."
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:7
msgid "This is a useful feature to minimize the number of resources (TCP connections) and at the same time separate concerns within your application by introducing separation between communication channels."
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:12
msgid "Default namespace"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:14
msgid "We call the default namespace ``/`` and it’s the one Socket.IO clients connect to by default, and the one the server listens to by default."
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:17
msgid "This namespace is identified by ``io.sockets`` or simply ``io``:"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:25
msgid "Each namespace emits a ``connection`` event that receives each ``Socket`` instance as a parameter"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:35
msgid "Custom namespaces"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:37
msgid "To set up a custom namespace, you can call the ``of`` function on the server-side:"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:48
msgid "On the client side, you tell Socket.IO client to connect to that namespace:"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:55
msgid "**Important note:** The namespace is an implementation detail of the Socket.IO protocol, and is not related to the actual URL of the underlying transport, which defaults to ``/socket.io/…``."
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:60
msgid "Rooms"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:62
msgid "Within each namespace, you can also define arbitrary channels that sockets can ``join`` and ``leave``."
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:66
msgid "Joining and leaving"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:68
msgid "You can call ``join`` to subscribe the socket to a given channel:"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:76
msgid "And then simply use ``to`` or ``in`` (they are the same) when broadcasting or emitting:"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:83
msgid "To leave a channel you call ``leave`` in the same fashion as ``join``."
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:86
msgid "Default room"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:88
msgid "Each ``Socket`` in Socket.IO is identified by a random, unguessable, unique identifier ``Socket#id``. For your convenience, each socket automatically joins a room identified by this id."
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:92
msgid "This makes it easy to broadcast messages to other sockets:"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:103
msgid "Disconnection"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:105
msgid "Upon disconnection, sockets ``leave`` all the channels they were part of automatically, and no special teardown is needed on your part."
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:109
msgid "Sending messages from the outside-world"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:111
msgid "In some cases, you might want to emit events to sockets in Socket.IO namespaces / rooms from outside the context of your Socket.IO processes."
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:114
msgid "There’s several ways to tackle this problem, like implementing your own channel to send messages into the process."
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:117
msgid "To facilitate this use case, we created two modules:"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:119
msgid "`socket.io-redis <https://github.com/socketio/socket.io-redis>`__"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:120
msgid "`socket.io-emitter <https://github.com/socketio/socket.io-emitter>`__"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:122
msgid "By implementing the Redis ``Adapter``:"
msgstr ""

#: ../../source/socket.io/docs/rooms-and-namespaces.rst:130
msgid "you can then ``emit`` messages from any other process to any channel"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:2
msgid "Using multiple nodes"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:5
msgid "Sticky load balancing"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:7
msgid "If you plan to distribute the load of connections among different processes or machines, you have to make sure that requests associated with a particular session id connect to the process that originated them."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:12
msgid "This is due to certain transports like XHR Polling or JSONP Polling relying on firing several requests during the lifetime of the “socket”. Failing to enable sticky balancing will result in the dreaded:"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:20
msgid "Which means that the upgrade request was sent to a node which did not know the given socket id, hence the HTTP 400 response."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:23
msgid "To illustrate why this is needed, consider the example of emitting an event to all connected clients:"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:30
msgid "Chances are that some of those clients might have an active bi-directional communication channel like ``WebSocket`` that we can write to immediately, but some of them might be using long-polling."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:34
msgid "If they’re using long polling, they might or might not have sent a request that we can write to. They could be “in between” those requests. In those situations, it means we have to buffer messages in the process. In order for the client to successfully claim those messages when he sends his request, the easiest way is for him to connect to be routed to that same process."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:41
msgid "As noted above, ``WebSocket`` transport do not have this limitation, since the underlying TCP connection is kept open between the client and the given server. That’s why you might find some suggestions to only use the ``WebSocket`` transport:"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:53
msgid "Both means that there is **NO FALLBACK** to long-polling when the websocket connection cannot be established, which is in fact one of the key feature of Socket.IO. In that case, you should maybe consider using raw `WebSocket <https://developer.mozilla.org/en-US/docs/Web/API/WebSocket>`__, or a thin wrapper like `robust-websocket <https://github.com/appuri/robust-websocket>`__."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:61
msgid "To achieve sticky-session, there are two main solutions:"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:63
msgid "routing clients based on their originating address"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:65
msgid "routing clients based on a cookie"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:68
msgid "NginX configuration"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:70
msgid "Within the ``http { }`` section of your ``nginx.conf`` file, you can declare a ``upstream`` section with a list of Socket.IO process you want to balance load between:"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:104
msgid "Notice the ``ip_hash`` instruction that indicates the connections will be sticky."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:107
msgid "Make sure you also configure ``worker_processes`` in the topmost level to indicate how many workers NginX should use. You might also want to look into tweaking the ``worker_connections`` setting within the ``events { }`` block."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:112
msgid "`Example <https://github.com/socketio/socket.io/tree/master/examples/cluster-nginx>`__"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:114
msgid "## Apache HTTPD configuration"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:142
msgid "`Example <https://github.com/socketio/socket.io/tree/master/examples/cluster-httpd>`__"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:145
msgid "HAProxy configuration"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:163
msgid "`Example <https://github.com/socketio/socket.io/tree/master/examples/cluster-haproxy>`__"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:166
msgid "Using Node.JS Cluster"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:168
msgid "Just like NginX, Node.JS comes with built-in clustering support through the ``cluster`` module."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:171
msgid "Fedor Indutny has created a module called `sticky session <https://github.com/indutny/sticky-session>`__ that ensures file descriptors (ie: connections) are routed based on the originating ``remoteAddress`` (ie: IP). Please note that this might lead to unbalanced routing, depending on the hashing method."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:177
msgid "You could also assign a different port to each worker of the cluster, based on the cluster worker ID, and balance the load with the configuration that you can find above."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:182
msgid "Passing events between nodes"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:184
msgid "Now that you have multiple Socket.IO nodes accepting connections, if you want to broadcast events to everyone (or even everyone in a certain `room </docs/rooms-and-namespaces/#Rooms>`__) you’ll need some way of passing messages between processes or computers."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:189
msgid "The interface in charge of routing messages is what we call the ``Adapter``. You can implement your own on top of the `socket.io-adapter <https://github.com/socketio/socket.io-adapter>`__ (by inheriting from it) or you can use the one we provide on top of `Redis <https://redis.io/>`__: `socket.io-redis <https://github.com/socketio/socket.io-redis>`__:"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:202
msgid "Then the following call:"
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:208
msgid "will be broadcast to every node through the `Pub/Sub mechanism <https://redis.io/topics/pubsub>`__ of Redis."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:211
msgid "**Note:** sticky-session is still needed when using the Redis adapter."
msgstr ""

#: ../../source/socket.io/docs/using-multiple-nodes.rst:213
msgid "If you want to pass messages to it from non-socket.io processes, you should look into `“Sending messages from the outside-world” </docs/rooms-and-namespaces/#Sending-messages-from-the-outside-world>`__."
msgstr ""

#: ../../source/socket.io/get-started.rst:2
msgid "Chat"
msgstr ""

#: ../../source/socket.io/get-started.rst:4
msgid "In this guide we’ll create a basic chat application. It requires almost no basic prior knowledge of Node.JS or Socket.IO, so it’s ideal for users of all knowledge levels."
msgstr ""

#: ../../source/socket.io/get-started.rst:11
msgid "Writing a chat application with popular web applications stacks like LAMP (PHP) has traditionally been very hard. It involves polling the server for changes, keeping track of timestamps, and it’s a lot slower than it should be."
msgstr ""

#: ../../source/socket.io/get-started.rst:16
msgid "Sockets have traditionally been the solution around which most real-time chat systems are architected, providing a bi-directional communication channel between a client and a server."
msgstr ""

#: ../../source/socket.io/get-started.rst:20
msgid "This means that the server can *push* messages to clients. Whenever you write a chat message, the idea is that the server will get it and push it to all other connected clients."
msgstr ""

#: ../../source/socket.io/get-started.rst:25
msgid "The web framework"
msgstr ""

#: ../../source/socket.io/get-started.rst:27
msgid "The first goal is to setup a simple HTML webpage that serves out a form and a list of messages. We’re going to use the Node.JS web framework ``express`` to this end. Make sure `Node.JS <https://nodejs.org>`__ is installed."
msgstr ""

#: ../../source/socket.io/get-started.rst:32
msgid "First let’s create a ``package.json`` manifest file that describes our project. I recommend you place it in a dedicated empty directory (I’ll call mine ``chat-example``)."
msgstr ""

#: ../../source/socket.io/get-started.rst:45
msgid "Now, in order to easily populate the ``dependencies`` with the things we need, we’ll use ``npm install --save``:"
msgstr ""

#: ../../source/socket.io/get-started.rst:52
msgid "Now that express is installed we can create an ``index.js`` file that will setup our application."
msgstr ""

#: ../../source/socket.io/get-started.rst:68
msgid "This translates into the following:"
msgstr ""

#: ../../source/socket.io/get-started.rst:70
msgid "Express initializes ``app`` to be a function handler that you can supply to an HTTP server (as seen in line 2)."
msgstr ""

#: ../../source/socket.io/get-started.rst:77
msgid "We define a route handler ``/`` that gets called when we hit our website home."
msgstr ""

#: ../../source/socket.io/get-started.rst:84
msgid "We make the http server listen on port 3000."
msgstr ""

#: ../../source/socket.io/get-started.rst:90
msgid "If you run ``node index.js`` you should see the following:"
msgstr ""

#: ../../source/socket.io/get-started.rst:92
msgid "And if you point your browser to ``http://localhost:3000``:"
msgstr ""

#: ../../source/socket.io/get-started.rst:95
msgid "Serving HTML"
msgstr ""

#: ../../source/socket.io/get-started.rst:97
msgid "So far in ``index.js`` we’re calling ``res.send`` and pass it a HTML string. Our code would look very confusing if we just placed our entire application’s HTML there. Instead, we’re going to create a ``index.html`` file and serve it."
msgstr ""

#: ../../source/socket.io/get-started.rst:102
msgid "Let’s refactor our route handler to use ``sendFile`` instead:"
msgstr ""

#: ../../source/socket.io/get-started.rst:110
msgid "And populate ``index.html`` with the following:"
msgstr ""

#: ../../source/socket.io/get-started.rst:137
msgid "If you restart the process (by hitting Control+C and running ``node index`` again) and refresh the page it should look like this:"
msgstr ""

#: ../../source/socket.io/get-started.rst:141
msgid "Integrating Socket.IO"
msgstr ""

#: ../../source/socket.io/get-started.rst:143
msgid "Socket.IO is composed of two parts:"
msgstr ""

#: ../../source/socket.io/get-started.rst:145
msgid "A server that integrates with (or mounts on) the Node.JS HTTP Server: `socket.io <https://github.com/socketio/socket.io>`__"
msgstr ""

#: ../../source/socket.io/get-started.rst:147
msgid "A client library that loads on the browser side: `socket.io-client <https://github.com/socketio/socket.io-client>`__"
msgstr ""

#: ../../source/socket.io/get-started.rst:150
msgid "During development, ``socket.io`` serves the client automatically for us, as we’ll see, so for now we only have to install one module:"
msgstr ""

#: ../../source/socket.io/get-started.rst:157
msgid "That will install the module and add the dependency to ``package.json``. Now let’s edit ``index.js`` to add it:"
msgstr ""

#: ../../source/socket.io/get-started.rst:178
msgid "Notice that I initialize a new instance of ``socket.io`` by passing the ``http`` (the HTTP server) object. Then I listen on the ``connection`` event for incoming sockets, and I log it to the console."
msgstr ""

#: ../../source/socket.io/get-started.rst:182
msgid "Now in index.html I add the following snippet before the ``</body>``:"
msgstr ""

#: ../../source/socket.io/get-started.rst:191
msgid "That’s all it takes to load the ``socket.io-client``, which exposes a ``io`` global (and the endpoint ``GET /socket.io/socket.io.js``), and then connect."
msgstr ""

#: ../../source/socket.io/get-started.rst:195
msgid "If you would like to use the local version of the client-side JS file, you can find it at ``node_modules/socket.io-client/dist/socket.io.js``."
msgstr ""

#: ../../source/socket.io/get-started.rst:198
msgid "Notice that I’m not specifying any URL when I call ``io()``, since it defaults to trying to connect to the host that serves the page."
msgstr ""

#: ../../source/socket.io/get-started.rst:201
msgid "If you now reload the server and the website you should see the console print “a user connected”."
msgstr ""

#: ../../source/socket.io/get-started.rst:204
msgid "Try opening several tabs, and you’ll see several messages:"
msgstr ""

#: ../../source/socket.io/get-started.rst:206
msgid "Each socket also fires a special ``disconnect`` event:"
msgstr ""

#: ../../source/socket.io/get-started.rst:217
msgid "Then if you refresh a tab several times you can see it in action:"
msgstr ""

#: ../../source/socket.io/get-started.rst:222
msgid "The main idea behind Socket.IO is that you can send and receive any events you want, with any data you want. Any objects that can be encoded as JSON will do, and `binary data </blog/introducing-socket-io-1-0/#binary>`__ is supported too."
msgstr ""

#: ../../source/socket.io/get-started.rst:227
msgid "Let’s make it so that when the user types in a message, the server gets it as a ``chat message`` event. The ``script`` section in ``index.html`` should now look as follows:"
msgstr ""

#: ../../source/socket.io/get-started.rst:247
msgid "And in ``index.js`` we print out the ``chat message`` event:"
msgstr ""

#: ../../source/socket.io/get-started.rst:257
msgid "The result should be like the following video:"
msgstr ""

#: ../../source/socket.io/get-started.rst:272
msgid "Broadcasting"
msgstr ""

#: ../../source/socket.io/get-started.rst:274
msgid "The next goal is for us to emit the event from the server to the rest of the users."
msgstr ""

#: ../../source/socket.io/get-started.rst:277
msgid "In order to send an event to everyone, Socket.IO gives us the ``io.emit``:"
msgstr ""

#: ../../source/socket.io/get-started.rst:284
msgid "If you want to send a message to everyone except for a certain socket, we have the ``broadcast`` flag:"
msgstr ""

#: ../../source/socket.io/get-started.rst:293
msgid "In this case, for the sake of simplicity we’ll send the message to everyone, including the sender."
msgstr ""

#: ../../source/socket.io/get-started.rst:304
msgid "And on the client side when we capture a ``chat message`` event we’ll include it in the page. The total client-side JavaScript code now amounts to:"
msgstr ""

#: ../../source/socket.io/get-started.rst:325
msgid "And that completes our chat application, in about 20 lines of code! This is what it looks like:"
msgstr ""

#: ../../source/socket.io/get-started.rst:341
msgid "Homework"
msgstr ""

#: ../../source/socket.io/get-started.rst:343
msgid "Here are some ideas to improve the application:"
msgstr ""

#: ../../source/socket.io/get-started.rst:345
msgid "Broadcast a message to connected users when someone connects or disconnects."
msgstr ""

#: ../../source/socket.io/get-started.rst:347
msgid "Add support for nicknames."
msgstr ""

#: ../../source/socket.io/get-started.rst:348
msgid "Don’t send the same message to the user that sent it himself. Instead, append the message directly as soon as he presses enter."
msgstr ""

#: ../../source/socket.io/get-started.rst:350
msgid "Add “{user} is typing” functionality."
msgstr ""

#: ../../source/socket.io/get-started.rst:351
msgid "Show who’s online."
msgstr ""

#: ../../source/socket.io/get-started.rst:352
msgid "Add private messaging."
msgstr ""

#: ../../source/socket.io/get-started.rst:353
msgid "Share your improvements!"
msgstr ""

#: ../../source/socket.io/get-started.rst:356
msgid "Getting this example"
msgstr ""

#: ../../source/socket.io/get-started.rst:358
msgid "You can find it on GitHub `here <https://github.com/socketio/chat-example>`__."
msgstr ""

#: ../../source/socket.io/index.rst:2
msgid "socket.io documentation"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:2
msgid "Server API"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:4
msgid "Exposed by ``require('socket.io')``."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:7
msgid "new Server(httpServer[, options])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:9
msgid "``httpServer`` *(http.Server)* the server to bind to."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:12
msgid "Works with and without ``new``:"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:26
msgid "name of the path to capture"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:29
msgid "``serveClie nt``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:29
msgid "whether to serve the client files"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:32
msgid "``adapter``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:32
msgid "the adapter to use. Defaults to an instance of the ``Adapter`` that ships with socket.io which is memory based. See `socket.io-adapter <htt ps://github.com/socketi o/socket.io-adapter>`__"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:42
msgid "``origins``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:42
msgid "``*``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:42
msgid "the allowed origins"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:54
msgid "Available options for the underlying Engine.IO server:"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:59
msgid "``pingTimeo ut``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:59
msgid "how many ms without a pong packet to consider the connection closed"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:63
msgid "``pingInter val``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:63
msgid "``25000``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:63
msgid "how many ms before sending a new ping packet"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:67
msgid "``upgradeTi meout``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:67
msgid "``10000``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:67
msgid "how many ms before an uncompleted transport upgrade is cancelled"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:71
msgid "``maxHttpBu fferSize``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:71
msgid "``10e7``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:71
msgid "how many bytes or characters a message can be, before closing the session (to avoid DoS)."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:77
msgid "``allowRequ est``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:77
msgid "A function that receives a given handshake or upgrade request as its first parameter, and can decide whether to continue or not. The second argument is a function that needs to be called with the decided information: ``fn(err, success)``, where ``success`` is a boolean value where false means that the request is rejected, and err is an error code."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:96
msgid "transports to allow connections to"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:99
msgid "``allowUpgr ades``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:99
msgid "whether to allow transport upgrades"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:111
msgid "``httpCompr ession``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:111
msgid "parameters of the http compression for the polling transports (see `zlib <http://nodejs.or g/api/zlib.html#zlib_op tions>`__ api docs). Set to ``false`` to disable."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:120
msgid "``cookie``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:120
msgid "``io``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:120
msgid "name of the HTTP cookie that contains the client sid to send as part of handshake response headers. Set to ``false`` to not send one."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:128
msgid "``cookiePat h``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:128
msgid "``/``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:128
msgid "path of the above ``cookie`` option. If false, no path will be sent, which means browsers will only send the cookie on the engine.io attached path (``/engine.io``). Set false to not save io cookie on all requests."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:139
msgid "``cookieHtt pOnly``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:139
msgid "if ``true`` HttpOnly io cookie cannot be accessed by client-side APIs, such as JavaScript. *This option has no effect if ``cookie`` or ``cookiePath`` is set to ``false``.*"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:149
msgid "``wsEngine` `"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:149
msgid "``ws``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:149
msgid "what WebSocket server implementation to use. Specified module must conform to the ``ws`` interface (see `ws module api docs <https://github.co m/websockets/ws/blob/ma ster/doc/ws.md>`__). Default value is ``ws``. An alternative c++ addon is also available by installing ``uws`` module."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:165
msgid "Among those options:"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:167
msgid "The ``pingTimeout`` and ``pingInterval`` parameters will impact the delay before a client knows the server is not available anymore. For example, if the underlying TCP connection is not closed properly due to a network issue, a client may have to wait up to ``pingTimeout + pingInterval`` ms before getting a ``disconnect`` event."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:174
msgid "The order of the ``transports`` array is important. By default, a long-polling connection is established first, and then upgraded to WebSocket if possible. Using ``['websocket']`` means there will be no fallback if a WebSocket connection cannot be opened."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:195
msgid "new Server(port[, options])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:197
msgid "``port`` *(Number)* a port to listen to (a new ``http.Server`` will be created)"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:201
#: ../../source/socket.io/server-api/API.rst:220
msgid "See `above <#new-Server-httpServer-options>`__ for the list of available ``options``."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:216
msgid "new Server(options)"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:249
msgid "server.sockets"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:251
msgid "*(Namespace)*"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:253
msgid "An alias for the default (``/``) namespace."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:262
msgid "server.serveClient([value])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:265
msgid "**Returns** ``Server|Boolean``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:267
msgid "If ``value`` is ``true`` the attached server (see ``Server#attach``) will serve the client files. Defaults to ``true``. This method has no effect after ``attach`` is called. If no arguments are supplied this method returns the current value."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:283
msgid "server.path([value])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:285
msgid "``value`` *(String)*"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:286
#: ../../source/socket.io/server-api/API.rst:323
msgid "**Returns** ``Server|String``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:288
msgid "Sets the path ``value`` under which ``engine.io`` and the static files will be served. Defaults to ``/socket.io``. If no arguments are supplied this method returns the current value."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:303
msgid "server.adapter([value])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:305
msgid "``value`` *(Adapter)*"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:306
msgid "**Returns** ``Server|Adapter``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:308
msgid "Sets the adapter ``value``. Defaults to an instance of the ``Adapter`` that ships with socket.io which is memory based. See `socket.io-adapter <https://github.com/socketio/socket.io-adapter>`__. If no arguments are supplied this method returns the current value."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:320
msgid "server.origins([value])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:322
msgid "``value`` *(String|String[])*"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:325
msgid "Sets the allowed origins ``value``. Defaults to any origins being allowed. If no arguments are supplied this method returns the current value."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:334
msgid "server.origins(fn)"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:336
#: ../../source/socket.io/server-api/Namespace.rst:123
#: ../../source/socket.io/server-api/Socket.rst:112
msgid "``fn`` *(Function)*"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:337
#: ../../source/socket.io/server-api/API.rst:396
#: ../../source/socket.io/server-api/API.rst:405
msgid "**Returns** ``Server``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:339
msgid "Provides a function taking two arguments ``origin:String`` and ``callback(error, success)``, where ``success`` is a boolean value indicating whether origin is allowed or not. If ``success`` is set to ``false``, ``error`` must be provided as a string value that will be appended to the server response, e.g. “Origin not allowed”."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:345
msgid "**Potential drawbacks**: \\* in some situations, when it is not possible to determine ``origin`` it may have value of ``*`` \\* As this function will be executed for every request, it is advised to make this function work as fast as possible \\* If ``socket.io`` is used together with ``Express``, the CORS headers will be affected only for ``socket.io`` requests. For Express you can use `cors <https://github.com/expressjs/cors>`__."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:363
msgid "server.attach(httpServer[, options])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:365
msgid "``httpServer`` *(http.Server)* the server to attach to"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:368
msgid "Attaches the ``Server`` to an engine.io instance on ``httpServer`` with the supplied ``options`` (optionally)."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:372
msgid "server.attach(port[, options])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:374
msgid "``port`` *(Number)* the port to listen on"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:377
msgid "Attaches the ``Server`` to an engine.io instance on a new http.Server with the supplied ``options`` (optionally)."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:381
msgid "server.listen(httpServer[, options])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:383
msgid "Synonym of `server.attach(httpServer[, options]) <#server-attach-httpServer-options>`__."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:387
msgid "server.listen(port[, options])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:389
msgid "Synonym of `server.attach(port[, options]) <#server-attach-port-options>`__."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:393
msgid "server.bind(engine)"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:395
msgid "``engine`` *(engine.Server)*"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:398
msgid "Advanced use only. Binds the server to a specific engine.io ``Server`` (or compatible API) instance."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:402
msgid "server.onconnection(socket)"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:404
msgid "``socket`` *(engine.Socket)*"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:407
msgid "Advanced use only. Creates a new ``socket.io`` client from the incoming engine.io (or compatible API) ``Socket``."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:411
msgid "server.of(nsp)"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:413
msgid "``nsp`` *(String|RegExp|Function)*"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:414
msgid "**Returns** ``Namespace``"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:416
msgid "Initializes and retrieves the given ``Namespace`` by its pathname identifier ``nsp``. If the namespace was already initialized it returns it immediately."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:424
msgid "A regex or a function can also be provided, in order to create namespace in a dynamic way:"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:445
msgid "With a function:"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:454
msgid "server.close([callback])"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:458
msgid "Closes the socket.io server. The ``callback`` argument is optional and will be called when all connections are closed."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:476
msgid "server.engine.generateId"
msgstr ""

#: ../../source/socket.io/server-api/API.rst:478
msgid "Overwrites the default method to generate your custom socket id."
msgstr ""

#: ../../source/socket.io/server-api/API.rst:480
msgid "The function is called with a node request object (``http.IncomingMessage``) as first parameter."
msgstr ""

#: ../../source/socket.io/server-api/Client.rst:2
msgid "Client"
msgstr ""

#: ../../source/socket.io/server-api/Client.rst:4
msgid "The ``Client`` class represents an incoming transport (engine.io) connection. A ``Client`` can be associated with many multiplexed ``Socket``\\ s that belong to different ``Namespace``\\ s."
msgstr ""

#: ../../source/socket.io/server-api/Client.rst:9
msgid "client.conn"
msgstr ""

#: ../../source/socket.io/server-api/Client.rst:11
#: ../../source/socket.io/server-api/Socket.rst:60
msgid "*(engine.Socket)*"
msgstr ""

#: ../../source/socket.io/server-api/Client.rst:13
msgid "A reference to the underlying ``engine.io`` ``Socket`` connection."
msgstr ""

#: ../../source/socket.io/server-api/Client.rst:16
msgid "client.request"
msgstr ""

#: ../../source/socket.io/server-api/Client.rst:18
#: ../../source/socket.io/server-api/Socket.rst:69
msgid "*(Request)*"
msgstr ""

#: ../../source/socket.io/server-api/Client.rst:20
msgid "A getter proxy that returns the reference to the ``request`` that originated the engine.io connection. Useful for accessing request headers such as ``Cookie`` or ``User-Agent``."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:2
msgid "Namespace"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:4
msgid "Represents a pool of sockets connected under a given scope identified by a pathname (eg: ``/chat``)."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:7
msgid "A client always connects to ``/`` (the main namespace), then potentially connect to other namespaces (while using the same underlying connection)."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:11
msgid "For the how and why, please take a look at: `Rooms and Namespaces </docs/rooms-and-namespaces/>`__."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:15
msgid "namespace.name"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:19
msgid "The namespace identifier property."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:22
msgid "namespace.connected"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:24
#: ../../source/socket.io/server-api/Socket.rst:36
#: ../../source/socket.io/server-api/Socket.rst:78
msgid "*(Object)*"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:26
msgid "The hash of ``Socket`` objects that are connected to this namespace, indexed by ``id``."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:30
msgid "namespace.adapter"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:32
msgid "*(Adapter)*"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:34
msgid "The ``Adapter`` used for the namespace. Useful when using the ``Adapter`` based on `Redis <https://github.com/socketio/socket.io-redis>`__, as it exposes methods to manage sockets and rooms accross your cluster."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:39
msgid "**Note:** the adapter of the main namespace can be accessed with ``io.of('/').adapter``."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:43
msgid "namespace.to(room)"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:45
#: ../../source/socket.io/server-api/Socket.rst:214
#: ../../source/socket.io/server-api/Socket.rst:261
#: ../../source/socket.io/server-api/Socket.rst:273
msgid "``room`` *(String)*"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:46
msgid "**Returns** ``Namespace`` for chaining"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:48
msgid "Sets a modifier for a subsequent event emission that the event will only be *broadcasted* to clients that have joined the given ``room``."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:51
#: ../../source/socket.io/server-api/Socket.rst:280
msgid "To emit to multiple rooms, you can call ``to`` several times."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:61
msgid "namespace.in(room)"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:63
msgid "Synonym of `namespace.to(room) <#namespace-to-room>`__."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:66
msgid "namespace.emit(eventName[, …args])"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:71
msgid "Emits an event to all connected clients. The following two are equivalent:"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:82
msgid "**Note:** acknowledgements are not supported when emitting from namespace."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:86
msgid "namespace.clients(callback)"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:90
msgid "Gets a list of client IDs connected to this namespace (across all nodes if applicable)."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:101
msgid "An example to get all clients in namespace’s room:"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:110
msgid "As with broadcasting, the default is all clients from the default namespace (‘/’):"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:121
msgid "namespace.use(fn)"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:125
msgid "Registers a middleware, which is a function that gets executed for every incoming ``Socket``, and receives as parameters the socket and a function to optionally defer execution to the next registered middleware."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:130
#: ../../source/socket.io/server-api/Socket.rst:118
msgid "Errors passed to middleware callbacks are sent as special ``error`` packets to clients."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:143
msgid "``socket`` *(Socket)* socket connection with client"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:145
msgid "Fired upon a connection from client."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:158
msgid "Event: ‘connection’"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:160
msgid "Synonym of `Event: ‘connect’ <#Event-‘connect’>`__."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:163
#: ../../source/socket.io/server-api/Socket.rst:352
msgid "Flag: ‘volatile’"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:165
msgid "Sets a modifier for a subsequent event emission that the event data may be lost if the clients are not ready to receive messages (because of network slowness or other issues, or because they’re connected through long polling and is in the middle of a request-response cycle)."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:175
#: ../../source/socket.io/server-api/Socket.rst:368
msgid "Flag: ‘binary’"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:177
#: ../../source/socket.io/server-api/Socket.rst:370
msgid "Specifies whether there is binary data in the emitted data. Increases performance when specified. Can be ``true`` or ``false``."
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:185
msgid "Flag: ‘local’"
msgstr ""

#: ../../source/socket.io/server-api/Namespace.rst:187
msgid "Sets a modifier for a subsequent event emission that the event data will only be *broadcast* to the current node (when the `Redis adapter <https://github.com/socketio/socket.io-redis>`__ is used)."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:5
msgid "A ``Socket`` is the fundamental class for interacting with browser clients. A ``Socket`` belongs to a certain ``Namespace`` (by default ``/``) and uses an underlying ``Client`` to communicate."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:9
msgid "It should be noted the ``Socket`` doesn’t relate directly to the actual underlying TCP/IP ``socket`` and it is only the name of the class."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:12
msgid "Within each ``Namespace``, you can also define arbitrary channels (called ``room``) that the ``Socket`` can join and leave. That provides a convenient way to broadcast to a group of ``Socket``\\ s (see ``Socket#to`` below)."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:17
msgid "The ``Socket`` class inherits from `EventEmitter <https://nodejs.org/api/events.html#events_class_eventemitter>`__. The ``Socket`` class overrides the ``emit`` method, and does not modify any other ``EventEmitter`` method. All methods documented here which also appear as ``EventEmitter`` methods (apart from ``emit``) are implemented by ``EventEmitter``, and documentation for ``EventEmitter`` applies."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:30
msgid "A unique identifier for the session, that comes from the underlying ``Client``."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:34
msgid "socket.rooms"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:38
msgid "A hash of strings identifying the rooms this client is in, indexed by room name."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:51
msgid "socket.client"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:53
msgid "*(Client)*"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:55
msgid "A reference to the underlying ``Client`` object."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:58
msgid "socket.conn"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:62
msgid "A reference to the underlying ``Client`` transport connection (engine.io ``Socket`` object). This allows access to the IO transport layer, which still (mostly) abstracts the actual TCP/IP socket."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:67
msgid "socket.request"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:71
msgid "A getter proxy that returns the reference to the ``request`` that originated the underlying engine.io ``Client``. Useful for accessing request headers such as ``Cookie`` or ``User-Agent``."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:76
msgid "socket.handshake"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:80
msgid "The handshake details:"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:95
msgid "Usage:"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:110
msgid "socket.use(fn)"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:114
msgid "Registers a middleware, which is a function that gets executed for every incoming ``Packet`` and receives as parameter the packet and a function to optionally defer execution to the next registered middleware."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:143
msgid "*(overrides ``EventEmitter.emit``)* - ``eventName`` *(String)* - ``args`` - ``ack`` *(Function)* - **Returns** ``Socket``"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:155
msgid "The ``ack`` argument is optional and will be called with the client’s answer."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:177
msgid "*(inherited from ``EventEmitter``)* - ``eventName`` *(String)* - ``callback`` *(Function)* - **Returns** ``Socket``"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:197
msgid "socket.once(eventName, listener)"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:200
msgid "socket.removeListener(eventName, listener)"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:203
msgid "socket.removeAllListeners([eventName])"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:206
msgid "socket.eventNames()"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:208
msgid "Inherited from ``EventEmitter`` (along with other methods not mentioned here). See Node.js documentation for the ``events`` module."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:212
msgid "socket.join(room[, callback])"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:216
#: ../../source/socket.io/server-api/Socket.rst:253
#: ../../source/socket.io/server-api/Socket.rst:263
#: ../../source/socket.io/server-api/Socket.rst:274
#: ../../source/socket.io/server-api/Socket.rst:310
msgid "**Returns** ``Socket`` for chaining"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:218
msgid "Adds the client to the ``room``, and fires optionally a callback with ``err`` signature (if any)."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:231
msgid "The mechanics of joining rooms are handled by the ``Adapter`` that has been configured (see ``Server#adapter`` above), defaulting to `socket.io-adapter <https://github.com/socketio/socket.io-adapter>`__."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:235
msgid "For your convenience, each socket automatically joins a room identified by its id (see ``Socket#id``). This makes it easy to broadcast messages to other sockets:"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:249
msgid "socket.join(rooms[, callback])"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:251
msgid "``rooms`` *(Array)*"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:255
msgid "Adds the client to the list of room, and fires optionally a callback with ``err`` signature (if any)."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:259
msgid "socket.leave(room[, callback])"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:265
msgid "Removes the client from ``room``, and fires optionally a callback with ``err`` signature (if any)."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:268
msgid "**Rooms are left automatically upon disconnection**."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:271
msgid "socket.to(room)"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:276
msgid "Sets a modifier for a subsequent event emission that the event will only be *broadcasted* to clients that have joined the given ``room`` (the socket itself being excluded)."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:299
msgid "**Note:** acknowledgements are not supported when broadcasting."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:302
msgid "socket.in(room)"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:304
msgid "Synonym of `socket.to(room) <#socket-to-room>`__."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:309
msgid "``value`` *(Boolean)* whether to following packet will be compressed"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:323
msgid "socket.disconnect(close)"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:325
msgid "``close`` *(Boolean)* whether to close the underlying connection"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:328
msgid "Disconnects this client. If value of close is ``true``, closes the underlying connection. Otherwise, it just disconnects the namespace."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:338
msgid "Flag: ‘broadcast’"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:340
msgid "Sets a modifier for a subsequent event emission that the event data will only be *broadcast* to every sockets but the sender."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:354
msgid "Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to receive messages (because of network slowness or other issues, or because they’re connected through long polling and is in the middle of a request-response cycle)."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:383
#: ../../source/socket.io/server-api/Socket.rst:438
msgid "``reason`` *(String)* the reason of the disconnection (either client or server-side)"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:386
msgid "Fired upon disconnection."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:396
msgid "Possible reasons:"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:399
msgid "Reason"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:399
msgid "Side"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:401
msgid "``transport err or``"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:401
#: ../../source/socket.io/server-api/Socket.rst:404
msgid "Server Side"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:401
msgid "Transport error"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:404
msgid "``server namesp ace disconnect` `"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:404
msgid "Server performs a ``socket.disconnect()``"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:408
msgid "``client namesp ace disconnect` `"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:408
#: ../../source/socket.io/server-api/Socket.rst:412
#: ../../source/socket.io/server-api/Socket.rst:416
msgid "Client Side"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:408
msgid "Got disconnect packet from client"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:412
msgid "``ping timeout` `"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:412
msgid "Client stopped responding to pings in the allowed amount of time (per the ``pingTimeout`` config setting)"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:416
msgid "``transport clo se``"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:416
msgid "Client stopped sending data"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:436
msgid "Event: ‘disconnecting’"
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:441
msgid "Fired when the client is going to be disconnected (but hasn’t left its ``rooms`` yet)."
msgstr ""

#: ../../source/socket.io/server-api/Socket.rst:453
msgid "These are reserved events (along with ``connect``, ``newListener`` and ``removeListener``) which cannot be used as event names."
msgstr ""

#: ../../source/socket.io/server-api/index.rst:2
msgid "Serve API"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:2
msgid "Socket.IO — Apache Cordova"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:4
msgid "Since Apache Cordova apps are written mostly in JS, it is actually really easy to use Socket.IO! Let’s walk through a small example."
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:7
msgid "First we prepare a simple server:"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:26
msgid "This server will simply listen to Socket.IO client connections, and will emit some text to them via a ``text`` event."
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:29
msgid "Now let’s get get down to the point. We want to start off by creating a new Cordova project to start modifying. Let’s start from scratch."
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:32
msgid "Running"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:38
msgid "will install the actual Cordova cli tool we use to create projects, install/remove dependencies, and launch our emulator among other things."
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:45
msgid "will make a new project template for us to start modifying. Feel free to poke around the newly created folder, called ``socket.io-example`` and take a look at some of the created files."
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:49
msgid "You should now be in the project folder. If you didn’t navigate there yet in command line, do it now with ``cd socket.io-example``."
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:52
msgid "Since I’m developing this example on OS X, I’m going to build for iOS. You could do it similarly for Android. To add the build target, run the following:"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:60
msgid "Next we want to build all the native components. We can do this by running"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:67
msgid "Now let’s actually run the template application to see that everything is working. If you are on OS X, you can install the iOS emulator like so"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:74
msgid "You should see the emulator open up with something like this when running ``cordova emulate ios``:"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:77
msgid "Now that you see everything working with the actual setup, let’s start write some code. Open up ``www/index.html`` in your project directory. It should look something like this:"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:128
msgid "To begin, we need to get the Socket.IO-client script. We can take it from the CDN like so:"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:137
msgid "Now to add actual logic, let’s write things below the ``app.initialize`` call. We might want to make sure that the device has loaded the application before running any of our code. We can do this like so:"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:151
msgid "This event will fire when the application has fully loaded. To add some actual logic, we just need to fill in that function. Let’s make something that receives the data emitted by our server on socket connection, and bring a notification box to show that text. Here’s what you could do:"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:171
msgid "Let’s run the emulator again with ``cordova emulate ios``, and here’s what you should see:"
msgstr ""

#: ../../source/socket.io/socket-io-with-apache-cordova.rst:174
msgid "That’s it! I hope this will help to get you started! Have fun hacking!"
msgstr ""

